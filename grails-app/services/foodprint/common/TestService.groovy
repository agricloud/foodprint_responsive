package foodprint.common

import foodprint.authority.*
import foodprint.erp.*
import foodprint.erp.ChangeOrder.*
import foodprint.erp.ChangeRecord.*
import foodprint.sft.*
import foodprint.sft.pull.*

class TestService {

    def grailsApplication
    def messageSource
    def dateService
    def testMFGService

    def siteGroup1, site1, user1

    def itemCategoryLayer11, itemCategoryLayer12, itemCategoryLayer1Other
    def itemCategoryLayer211, itemCategoryLayer212, itemCategoryLayer221, itemCategoryLayer222

    def productBrand1, materialBrand1, materialBrand2

    def manufacturerTAIWAN, manufacturerJAPAN, manufacturerHONGKONG, manufacturerMEXICO, manufacturerCHINA,
        manufacturerITALY, manufacturerUNITEDKINGDOM, manufacturerInspect

    def product1ProductBrand1,
        semiProduct1ProductBrand1, semiProduct2ProductBrand1,
        material1MaterialBrand1, material2MaterialBrand1, material2MaterialBrand2, material3MaterialBrand1,
        material4MaterialBrand1, material5MaterialBrand2, material6MaterialBrand2, material7MaterialBrand2
    
    def factory1, factory2
    def customer1, customer2
    def operator1, operator2, accountant1
    def supplier1, supplier2, supplierInspect
    def workstation11, workstation12, workstation21
    def operationCategoryLayer11, operationCategoryLayer12, operationCategoryLayer13, operationCategoryLayer1Other
    def operation1, operation2, operation3, operation4, operationInspect

    def product1ProductBrand1Stage1, product1ProductBrand1Stage2, product1ProductBrand1Stage3, product1ProductBrand1Stage4

    def semiProduct1ProductBrand1RigisteredNumTW,
        material1MaterialBrand1RigisteredNumTW, material1MaterialBrand1RigisteredNumJP, material1MaterialBrand1RigisteredNumHK,
        material2MaterialBrand1RigisteredNumTW, material2MaterialBrand2RigisteredNumTW, material3MaterialBrand1RigisteredNumTW,
        material5MaterialBrand2RigisteredNumTW, material5MaterialBrand2RigisteredNumUK, material5MaterialBrand2RigisteredNumMC,
        material6MaterialBrand2RigisteredNumTW, material7MaterialBrand2RigisteredNumTW

    def materialWarehouse11, productWarehouse11, materialWarehouse21, productWarehouse21

    def materialWarehouseLocation111, materialWarehouseLocation112, productWarehouseLocation111, productWarehouseLocation112,
        materialWarehouseLocation211, materialWarehouseLocation212, productWarehouseLocation211, productWarehouseLocation212

    def typeNameTransactionSTORAGE, typeNameReturnTransactionSTORAGE,
        typeNameTransactionSALE, typeNameTransactionREQUISITION, typeNameTransactionADJUSTMENT,
        typeNameCustomerOrder, typeNameSaleSheet, typeNameSaleReturnSheet,
        typeNamePurchaseSheet, typeNamePurchaseReturnSheet,
        typeNameManufactureOrder, typeNameOutSrcManufactureOrder,
        // typeNameManufactureOrderRework,
        typeNameMaterialSheet, typeNameMaterialReturnSheet,
        typeNameOutSrcMaterialSheet, typeNameOutSrcMaterialReturnSheet,
        typeNameStockInSheet, typeNameOutSrcPurchaseSheet, typeNameOutSrcPurchaseReturnSheet,
        typeNameTransferOrderRELEASE, typeNameTransferOrderTRANSFER, typeNameTransferOrderSTORAGE,
        typeNameOutSrcTransferOrderRELEASE, typeNameOutSrcTransferOrderTRANSFER, typeNameOutSrcTransferOrderSTORAGE
        // typeNameWorkReport,

    def customerOrder1, customerOrder2
    def customerOrderDet11
    def manufactureOrder1, manufactureOrder2, manufactureOrder3, manufactureOrder4,
        manufactureOrder5, manufactureOrder6, manufactureOrderChangeOrder
    
    def product1ProductBrand1Batch1, product1ProductBrand1Batch2, product1ProductBrand1Batch3, product1ProductBrand1Batch4,
        semiProduct1ProductBrand1Batch1, semiProduct1ProductBrand1Batch2,
        material1MaterialBrand1Batch1, material2MaterialBrand1Batch1, material2MaterialBrand2Batch1,
        material3MaterialBrand1Batch1, material4MaterialBrand1Batch1, material5MaterialBrand2Batch1,
        material6MaterialBrand2Batch1, material7MaterialBrand2Batch1,
        transactionBatch11, transactionBatch21, transactionBatch31, transactionBatch41

    def product1ProductBrand1ItemRoute1, product1ProductBrand1ItemRoute2, product1ProductBrand1ItemRoute3,
        semiProduct1ProductBrand1ItemRoute1, semiProduct1ProductBrand1ItemRoute2
    def product1ProductBrand1Batch1Operation1, product1ProductBrand1Batch1Operation2,
        product1ProductBrand1Batch1Operation3, product1ProductBrand1Batch1Operation4,
        product1ProductBrand1Batch1Operation5,
        semiProduct1ProductBrand1Batch1Operation1, semiProduct1ProductBrand1Batch1Operation2,
        product1ProductBrand1Batch3Operation1, product1ProductBrand1Batch3Operation2,
        product1ProductBrand1Batch3Operation3, product1ProductBrand1Batch3Operation4,
        product1ProductBrand1Batch3Operation5,
        semiProduct1ProductBrand1Batch2Operation1, semiProduct1ProductBrand1Batch2Operation2

    def inventory1, inventory2, inventory3, inventory4, inventory5, inventory6,
        inventory7, inventory8, inventory9

    def inventoryDetail11, inventoryDetail21, inventoryDetail31, inventoryDetail41, inventoryDetail51,
        inventoryDetail61, inventoryDetail71, inventoryDetail81, inventoryDetail91, inventoryDetail101,
        inventoryDetail501, inventoryDetail502, inventoryDetail503, inventoryDetail504
    
    def inventoryTransactionSheet1, inventoryTransactionSheet2, inventoryTransactionSheet3,
        inventoryTransactionSheet4//, inventoryTransactionSheet5
    def inventoryTransactionSheetDet11, inventoryTransactionSheetDet21, inventoryTransactionSheetDet31,
        inventoryTransactionSheetDet41

    def purchaseSheet1, purchaseSheet2
    def purchaseSheetDet11, purchaseSheetDet12, purchaseSheetDet13, purchaseSheetDet14,
        purchaseSheetDet21, purchaseSheetDet22, purchaseSheetDet23
    
    def materialSheet1, materialSheet2, materialSheet3
    def materialSheetDet11, materialSheetDet12, materialSheetDet13,
        materialSheetDet21, materialSheetDet22, materialSheetDet23, materialSheetDet24, materialSheetDet25,
        materialSheetDet31, materialSheetDet32, materialSheetDet33
    
    def materialSheetDetCustomize1,  material5MaterialSheetDetCustomize1,
        itemCategoryLayer12MaterialSheetDetCustomize1, itemCategoryLayer221MaterialSheetDetCustomize1,
        material6ItemCategoryLayer12ItemCategoryLayer221MaterialSheetDetCustomize1

    def materialSheetDet31MaterialSheetDetCustomizeDet1,
        materialSheetDet31Material5MaterialSheetDetCustomize1,
        materialSheetDet31itemCategoryLayer12MaterialSheetDetCustomize1,
        materialSheetDet32itemCategoryLayer221MaterialSheetDetCustomize1,
        materialSheetDet32material6ItemCategoryLayer12ItemCategoryLayer221MaterialSheetDetCustomize1

    def stockInSheet1, stockInSheet2
    def stockInSheetDet11, stockInSheetDet21
    def outSrcPurchaseSheet1
    def outSrcPurchaseSheetDet11

    def saleSheet1, saleSheet2
    def saleSheetDet11, saleSheetDet21
    def purchaseReturnSheet1, purchaseReturnSheet2
    def purchaseReturnSheetDet13, purchaseReturnSheetDet14, purchaseReturnSheetDet23
    def materialReturnSheet1, materialReturnSheet2, materialReturnSheet3
    def materialReturnSheetDet25, materialReturnSheetDet31, materialReturnSheetDet32, materialReturnSheetDet33
    def outSrcPurchaseReturnSheet1
    def outSrcPurchaseReturnSheetDet11
    def saleReturnSheet1, saleReturnSheet2
    def saleReturnSheetDet11

    def paramInspect1, paramInspect2, paramInspect3, paramInspect4, paramInspect5,
        paramOther1, paramNutrition1, paramNutrition2, paramNutrition3
    def reportInspect1, reportOther1, reportNutrition1
    def reportParamInspect1, reportParamInspect2, reportParamInspect3, reportParamInspect4, reportParamInspect5,
        reportParamOther1, reportParamNutrition1, reportParamNutrition2, reportParamNutrition3
    def brdInspect1, brdInspect2, brdOther1, brdNutrition1

    def loopsite1,
        loopbrand1,
        loopitemcategorylayer11, loopitemcategorylayer211,
        loopitem1, loopitem2,
        loopfactory1,
        loopcustomer1,
        loopoperator1,
        loopmanufacturer1,
        loopmanufacturer_issupplier1,
        loopsupplier1,
        loopsupplier_ismanufacturer1,
        loopworkstation1,
        loopoperationcategory1,
        loopoperation1,
        loopwarehouse1,
        loopwarehouselocation1,
        looptypenameTRANSACTION1, looptypenameCUSTOMERORDER1,
        looptypenameSALESHEET1, looptypenameSALERETURNSHEET1,
        looptypenamePURCHASESHEET1, looptypenamePURCHASERETURNSHEET1,
        looptypenameMANUFACTUREORDER1, looptypenameOUTSRCMANUFACTUREORDER1,
        looptypenameMATERIALSHEET1, looptypenameMATERIALRETURNSHEET1,
        looptypenameOUTSRCMATERIALSHEET1, looptypenameOUTSRCMATERIALRETURNSHEET1,
        looptypenameSTOCKINSHEET1,
        looptypenameOUTSRCPURCHASESHEET1, looptypenameOUTSRCPURCHASERETURNSHEET1,
        loopcustomerorder1, loopcustomerorderdet1,
        loopmanufactureorder1, loopmanufactureorder51,
        loopbatch1, /* use for inventoryTransactionSheetDet*/loopbatch2, loopbatch51, loopbatch52,
        loopbatchoperation1,
        loopinventory1, loopinventorydetail1,
        loopinventorytransactionsheet1, loopinventorytransactionsheetdet1,
        looppurchasesheet1, looppurchasesheetdet1,
        loopmaterialsheet1, loopmaterialsheetdet1,
        loopmaterialsheetdetcustomize1,
        loopstockinsheet1, loopstockinsheetdet1,
        loopoutsrcpurchasesheet1, loopoutsrcpurchasesheetdet1,
        loopsalesheet1, loopsalesheetdet1,
        looppurchasereturnsheet1, looppurchasereturnsheetdet1,
        loopmaterialreturnsheet1, loopmaterialreturnsheetdet1,
        loopoutsrcpurchasereturnsheet1, loopoutsrcpurchasereturnsheetdet1, 
        loopsalereturnsheet1, loopsalereturnsheetdet1,
        loopparam1, loopreport1, loopreportparam1

    def createTestData = { domain, specifiedData, createLoopData, processMetaClass ->
        //ТеЎТ║ќТИгУЕдУ│ЄТќЎ№╝їСйюуѓ║жЕЌУГЅС╗ЦтЈі unit test уће
        domain = [Site] + domain
        if (specifiedData) {
            domain.each {
                if (processMetaClass == true) {
                    it.metaClass.getGrailsApplication = {
                        return grailsApplication
                    }
                    it.metaClass.getMessageSource = {
                        return messageSource
                    }
                }

                if ("agri" in specifiedData) {
                    log.debug "create${it.getSimpleName()}"
                    "create${it.getSimpleName()}"(createLoopData)
                }
                if ("mfg" in specifiedData) {
                    log.debug  "testMFGService.create${it.getSimpleName()}"
                    testMFGService."create${it.getSimpleName()}"()
                }
            }//end of each
        }
    }

    def createSite = { createLoopData ->
        siteGroup1 = SiteGroup.findByName("default") ?: new SiteGroup(name: "default", title: "default").save(failOnError: true, flush: true)

        site1 = Site.findByName("site1") ?: new Site(name: "site1", title: "ТИгУЕдтЁгтЈИ1", siteGroup: siteGroup1,
            activationCode: grailsApplication.config.grails.dev.site.activationCode).save(failOnError: true, flush: true)
        user1 = User.findByUsername("admin") ?: new User(userType: UserType.ADMIN, username: "admin",
            fullName: "admin", password: "admin", lastLoginSite: site1, enabled: true, siteGroup: siteGroup1,
            activationCode: grailsApplication.config.grails.dev.admin.activationCode).save(failOnError: true, flush: true)
        UserSite.create(user1, site1)

        if (createLoopData) {
            (1..90).each {
                //loopstite_#siteGroup_#ТхЂТ░┤УЎЪ
                def site = Site.findByName("loopsite1_${it}") ?: new Site(name: "loopsite1_${it}", title: "тЁгтЈИ1_${it}", siteGroup: siteGroup1,
                    activationCode: grailsApplication.config.grails.dev.site.activationCode).save(failOnError: true, flush: true)

                if (it==1) {
                    loopsite1 = Site.findByName("loopsite1_1")
                    //ADMIN permanent
                    (1..50).each { index ->
                        def user = new User(userType: UserType.ADMIN, username: "loopuser1_${it}_${index}", fullName: "loopuser1_${it}_${index}",
                            password: "0000", lastLoginSite: site, enabled: true, siteGroup: siteGroup1,
                            activationCode: grailsApplication.config.grails.dev.admin.activationCode).save(failOnError: true, flush: true)
                        UserSite.create(user, site)
                    }
                    //ADMIN СИђт╣┤
                    (51..54).each { index ->
                        def user = new User(userType: UserType.ADMIN, username: "loopuser1_${it}_${index}", fullName: "loopuser1_${it}_${index}",
                            password: "0000", lastLoginSite: site, enabled: true, siteGroup: siteGroup1,
                            activationCode: "59477ef6-2c5a-4fb9-aab5-7d88307823e0").save(failOnError: true, flush: true)
                        UserSite.create(user, site)
                    }
                    //ADMIN жЂјТюЪ
                    (61..64).each { index ->
                        def user = new User(userType: UserType.ADMIN, username: "loopuser1_${it}_${index}", fullName: "loopuser1_${it}_${index}",
                            password: "0000", lastLoginSite: site, enabled: true, siteGroup: siteGroup1,
                            activationCode: "59477ef6-2c5a-4fb9-aab5-7d88307823e0").save(failOnError: true, flush: true)
                        UserSite.create(user, site)
                    }


                    //USER permanent
                    (101..150).each { index ->
                        def user = new User(userType: UserType.USER, username: "loopuser1_${it}_${index}", fullName: "loopuser1_${it}_${index}",
                            password: "0000", lastLoginSite: site, enabled: true, siteGroup: siteGroup1,
                            activationCode: grailsApplication.config.grails.dev.user.activationCode).save(failOnError: true, flush: true)
                        UserSite.create(user, site)
                    }
                    //USER СИђт╣┤
                    (151..154).each { index ->
                        def user = new User(userType: UserType.USER, username: "loopuser1_${it}_${index}", fullName: "loopuser1_${it}_${index}",
                            password: "0000", lastLoginSite: site, enabled: true, siteGroup: siteGroup1,
                            activationCode: "10008a5e-c5d3-42d4-a8b3-61099671452f").save(failOnError: true, flush: true)
                        UserSite.create(user, site)
                    }
                    //USER жЂјТюЪ
                    (161..164).each { index ->
                        def user = new User(userType: UserType.USER, username: "loopuser1_${it}_${index}", fullName: "loopuser1_${it}_${index}",
                            password: "0000", lastLoginSite: site, enabled: true, siteGroup: siteGroup1,
                            activationCode: "41c6c3e5-e4a0-41b4-98f9-9f0df9339e8e").save(failOnError: true, flush: true)
                        UserSite.create(user, site)
                    }
                }
                else {
                    def user = new User(userType: UserType.ADMIN, username: "loopuser1_${it}_1", fullName: "loopuser1_${it}_1",
                        password: "0000", lastLoginSite: site, enabled: true, siteGroup: siteGroup1,
                        activationCode: grailsApplication.config.grails.dev.admin.activationCode).save(failOnError: true, flush: true)
                    UserSite.create(user, site)
                }
            }
            (91..100).each { //siteжЂјТюЪ
                    def site = Site.findByName("loopsite1_${it}") ?: new Site(name: "loopsite1_${it}", title: "тЁгтЈИ1_${it}", siteGroup: siteGroup1, activationCode: "6ef9e8f8-ae33-4876-8d61-c9ceda208192").save(failOnError: true, flush: true)
                    def user = new User(userType: UserType.ADMIN, username: "loopuser1_${it}_1", fullName: "loopuser1_${it}_1",
                        password: "0000", lastLoginSite: site, enabled: true, siteGroup: siteGroup1,
                        activationCode: grailsApplication.config.grails.dev.admin.activationCode).save(failOnError: true, flush: true)
                    UserSite.create(user, site)
            }

            def siteGroup2 = new SiteGroup(name: "siteGroup2", title: "ТИгУЕдуЙцухё2").save(failOnError: true, flush: true)
            (1..10).each {
                    def site = Site.findByName("loopsite2_${it}") ?: new Site(name: "loopsite2_${it}", title: "тЁгтЈИ2_${it}", siteGroup: siteGroup2, activationCode: grailsApplication.config.grails.dev.site.activationCode).save(failOnError: true, flush: true)
                    def user = new User(userType: UserType.ADMIN, username: "loopuser2_${it}_1", fullName: "loopuser2_${it}_1",
                        password: "0000", lastLoginSite: site, enabled: true, siteGroup: siteGroup2,
                        activationCode: grailsApplication.config.grails.dev.admin.activationCode).save(failOnError: true, flush: true)
                    UserSite.create(user, site)
            }
        }
    }

    def createItemCategoryLayer1 = { createLoopData ->

        itemCategoryLayer11 = new ItemCategoryLayer1(name: "ca11", title: "УѓЦТќЎ", site: site1).save(failOnError: true, flush: true)
        itemCategoryLayer12 = new ItemCategoryLayer1(name: "ca12", title: "уЌЁУЪ▓УЇЅт«│жў▓Т▓╗", site: site1).save(failOnError: true, flush: true)
        itemCategoryLayer1Other = new ItemCategoryLayer1(name: "other", title: "тЁХС╗ќ", site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopitemcategorylayer1 = new ItemCategoryLayer1(name: "loopca1_${it}", title: "жАъ1_${it}", site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopitemcategorylayer11 = loopitemcategorylayer1)
            }
        }
    }

    def createItemCategoryLayer2 = { createLoopData ->

        itemCategoryLayer211 = new ItemCategoryLayer2(name: "ca211", title: "тЪ║УѓЦ", itemCategoryLayer1: itemCategoryLayer11, site: site1).save(failOnError: true, flush: true)
        itemCategoryLayer212 = new ItemCategoryLayer2(name: "ca212", title: "уд«УѓЦ", itemCategoryLayer1: itemCategoryLayer11, site: site1).save(failOnError: true, flush: true)

        itemCategoryLayer221 = new ItemCategoryLayer2(name: "ca221", title: "УЙ▓УЌЦ", itemCategoryLayer1: itemCategoryLayer12, site: site1).save(failOnError: true, flush: true)
        itemCategoryLayer222 = new ItemCategoryLayer2(name: "ca222", title: "жЮъУЙ▓УЌЦ", itemCategoryLayer1: itemCategoryLayer12, site: site1).save(failOnError: true, flush: true)
   
        if (createLoopData) {
            (1..100).each {
                def loopitemcategorylayer2 = new ItemCategoryLayer2(name: "loopca2_1${it}", title: "жАъ2_1${it}", itemCategoryLayer1: loopitemcategorylayer11, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopitemcategorylayer211 = loopitemcategorylayer2)
            }
        }
    }

    def createBrand = { createLoopData ->

        productBrand1 = new Brand(name: "productBrand1", title: "УБйжђатЊЂтЊЂуЅї", site: site1).save(failOnError: true, flush: true)
        materialBrand1 = new Brand(name: "materialBrand1", title: "тЊЂуЅїA", site: site1).save(failOnError: true, flush: true)
        materialBrand2 = new Brand(name: "materialBrand2", title: "тЊЂуЅїB", site: site1).save(failOnError: true, flush: true)
        
        if (createLoopData) {
            (1..100).each {
                def loopbrand = new Brand(name: "loopbrand_${it}", title: "тЊЂуЅї_${it}", site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopbrand1 = loopbrand)

            }
        }
    }

    def createItem = { createLoopData ->

        product1ProductBrand1 = new Item(name: "product1", brand: productBrand1, title: "ућбтЊЂ-ујЅу▒│", itemType: ItemType.MANUFACTURE, spec: "ућюујЅу▒│№╝їжФўу│ќтѕєсђЂуџ«Уќё", unit: "kg", description: "жЮътЪ║тЏаУйЅТ«ќтЊЂуе«", site: site1).save(failOnError: true, flush: true)

        semiProduct1ProductBrand1 = new Item(name: "semiProduct1", brand: productBrand1, title: "УЄфУБйтЇіТѕљтЊЂ", itemType: ItemType.MANUFACTURE, spec: "тЇіТѕљтЊЂ", unit: "kg", description: "жЮътЪ║тЏаУйЅТ«ќтЊЂуе«", itemCategoryLayer1: itemCategoryLayer1Other, site: site1).save(failOnError: true, flush: true)
        
        semiProduct2ProductBrand1 = new Item(name: "semiProduct2", brand: productBrand1, title: "УеЌтцќУБйжђатЇіТѕљтЊЂ", itemType: ItemType.OUTSRCMANUFACTURE, spec: "тЇіТѕљтЊЂ", unit: "kg", description: "жЮътЪ║тЏаУйЅТ«ќтЊЂуе«", itemCategoryLayer1: itemCategoryLayer1Other, site: site1).save(failOnError: true, flush: true)

        material1MaterialBrand1 = new Item(name: "material1", brand: materialBrand1, title: "тјЪТќЎ1тЊЂуЅї1-уёА", itemType: ItemType.PURCHASE, spec: "A", unit: "kg", description: "жЮътЪ║тЏа", site: site1).save(failOnError: true, flush: true)

        material2MaterialBrand1 = new Item(name: "material2", brand: materialBrand1, title: "тјЪТќЎ2тЊЂуЅї1-УѓЦТќЎ-уёА", itemType: ItemType.PURCHASE, spec: "B", unit: "kg", description: "жЮътЪ║тЏа", itemCategoryLayer1: itemCategoryLayer11, defaultManufacturer: manufacturerTAIWAN, site: site1).save(failOnError: true, flush: true)
        material2MaterialBrand2 = new Item(name: "material2", brand: materialBrand2, title: "тјЪТќЎ2тЊЂуЅї2-УѓЦТќЎ-уёА", itemType: ItemType.PURCHASE, spec: "B", unit: "kg", description: "жЮътЪ║тЏа", itemCategoryLayer1: itemCategoryLayer11, defaultManufacturer: manufacturerJAPAN, site: site1).save(failOnError: true, flush: true)
        material3MaterialBrand1 = new Item(name: "material3", brand: materialBrand1, title: "тјЪТќЎ3тЊЂуЅї1-УѓЦТќЎ-тЪ║УѓЦ", itemType: ItemType.PURCHASE, spec: "C", unit: "kg", description: "жЮътЪ║тЏа", itemCategoryLayer1: itemCategoryLayer11, itemCategoryLayer2: itemCategoryLayer211, defaultManufacturer: manufacturerTAIWAN, site: site1).save(failOnError: true, flush: true)
        material4MaterialBrand1 = new Item(name: "material4", brand: materialBrand1, title: "тјЪТќЎ4тЊЂуЅї1-УѓЦТќЎ-уд«УѓЦ", itemType: ItemType.PURCHASE, spec: "D", unit: "kg", description: "жЮътЪ║тЏа", itemCategoryLayer1: itemCategoryLayer11, itemCategoryLayer2: itemCategoryLayer212, defaultManufacturer: manufacturerTAIWAN, site: site1).save(failOnError: true, flush: true)

        material5MaterialBrand2 = new Item(name: "material5", brand: materialBrand2, title: "тјЪТќЎ5тЊЂуЅї2-уЌЁУЪ▓УЇЅт«│-уёА", itemType: ItemType.PURCHASE, spec: "E", unit: "kg", description: "жЮътЪ║тЏа", itemCategoryLayer1: itemCategoryLayer12, defaultManufacturer: manufacturerJAPAN, site: site1).save(failOnError: true, flush: true)
        material6MaterialBrand2 = new Item(name: "material6", brand: materialBrand2, title: "тјЪТќЎ6тЊЂуЅї2-уЌЁУЪ▓УЇЅт«│-УЙ▓УЌЦ", itemType: ItemType.PURCHASE, spec: "F", unit: "kg", description: "жЮътЪ║тЏа", itemCategoryLayer1: itemCategoryLayer12, itemCategoryLayer2: itemCategoryLayer221, defaultManufacturer: manufacturerJAPAN, site: site1).save(failOnError: true, flush: true)
        material7MaterialBrand2 = new Item(name: "material7", brand: materialBrand2, title: "тјЪТќЎ7тЊЂуЅї2-уЌЁУЪ▓УЇЅт«│-жЮъУЙ▓УЌЦ", itemType: ItemType.PURCHASE, spec: "G", unit: "kg", description: "жЮътЪ║тЏа", itemCategoryLayer1: itemCategoryLayer12, itemCategoryLayer2: itemCategoryLayer222, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopitem = new Item(name: "loopitem_${it}", brand: loopbrand1, title: "тЊЂжаЁ_${it}", itemType: ItemType.MANUFACTURE, spec: "loop_${it}", unit: "loop_${it}", description: "loop_${it}", site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopitem1 = loopitem)
                it != 2 ?: (loopitem2 = loopitem)
            }
        }

    }

    def createFactory = { createLoopData ->
        factory1 = new Factory(name: "fct1", title: "тиЦт╗а1", tel: "02-333-111-1", email: "AAA@xx.com", address: "тЈ░тїЌтИѓТќ░ућЪтЇЌУи»333УЎЪ", site: site1).save(failOnError: true, flush: true)
        factory2 = new Factory(name: "fct2", title: "тиЦт╗а2", tel: "02-333-111-2", email: "BBB@xx.com", address: "тЈ░тїЌтИѓт┐атГЮТЮ▒Уи»49УЎЪ", site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopfactory = new Factory(name: "loopfactory_${it}", title: "тиЦт╗а_${it}", tel: "02-333-111-${it}", email: "loop_${it}@xx.com", address: "тЈ░тїЌтИѓт┐атГЮТЮ▒Уи»${it}УЎЪ", site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopfactory1 = loopfactory)
            }
        }
    }

    def createCustomer = { createLoopData ->

        customer1 = new Customer(name: "customer1", title: "т«бТѕХжЎ│т░ЈтДљ", site: site1).save(failOnError: true, flush: true)
        customer2 = new Customer(name: "customer2", title: "т«бТѕХујІтЁѕућЪ", site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopcustomer = new Customer(name: "loopcustomer_${it}", title: "т«бТѕХ_${it}", site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopcustomer1 = loopcustomer)
            }
        }
    }

    def createEmployee = { createLoopData ->

        operator1  = new Employee(name: "opr1", title: "opжЎ│т░ЈТўј", employeeType: EmployeeType.OPERATOR, idNumber: "F123456789", birthDate: new Date(100, 8, 23, 16, 0),
                tel: "02-1234-5678", mobile: "0910-123-456", permanentAddress: "тЈ░тїЌтИѓСИГУЈ»Уи»СИЅТ«х155УЎЪ", residentialAddress: "тЈ░тїЌтИѓтИѓТ░ЉтцДжЂЊС║їТ«х1УЎЪ", correspondenceAddress: "тЈ░тїЌтИѓтИѓТ░ЉтцДжЂЊС║їТ«х1УЎЪ", contact: "жЎ│т░ЈуЙј", contactPhoneNumber: "0911-111-111", site: site1).save(failOnError: true, flush: true)
        operator2  = new Employee(name: "opr2", title: "opтіЅтцДжЏё", employeeType: EmployeeType.OPERATOR, idNumber: "H123456789", birthDate: new Date(105, 8, 23, 16, 0),
                tel: "04-1234-5678", mobile: "0983-123-456", permanentAddress: "тЈ░СИГтИѓтЈ░уЂБтцДжЂЊтЏЏТ«х99УЎЪ", residentialAddress: "тЈ░СИГтИѓтЈ░уЂБтцДжЂЊтЏЏТ«х99УЎЪ", correspondenceAddress: "тЈ░СИГтИѓтЈ░уЂБтцДжЂЊтЏЏТ«х99УЎЪ", contact: "тіЅждЎждЎ", contactPhoneNumber: "0970-111-111", site: site1).save(failOnError: true, flush: true)
        accountant1 = new Employee(name: "act1", title: "acУе▒уЙјуЙј", employeeType: EmployeeType.ACCOUNTANT, idNumber: "A223456789", birthDate: new Date(110, 1, 2, 9, 0),
                tel: "03-1234-5678", mobile: "0933-123-456", permanentAddress: "ТАЃтюњтИѓСИГтјЪУи»21УЎЪС╣І1", residentialAddress: "ТАЃтюњтИѓСИГтјЪУи»21УЎЪС╣І1", correspondenceAddress: "ТАЃтюњтИѓСИГтјЪУи»21УЎЪС╣І5", contact: "Уе▒ТЂЕТЂЕ", contactPhoneNumber: "0935-111-111", site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopoperator = new Employee(name: "loopemployee_${it}", title: "УЂитЊА_${it}", employeeType: EmployeeType.OPERATOR, idNumber: "A11111111${it}", birthDate: (new Date()).previous(),
                        tel: "03-1234-5678", mobile: "0933-123-456", permanentAddress: "ТАЃтюњтИѓСИГтјЪУи»100тии${it}УЎЪ", residentialAddress: "ТАЃтюњтИѓСИГтјЪУи»100тии${it}УЎЪ", correspondenceAddress: "ТАЃтюњтИѓСИГтјЪУи»100тии${it}УЎЪ", contact: "УЂ»ухАС║║_${it}", contactPhoneNumber: "0935-111-12${it}", site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopoperator1 = loopoperator)
            }
        }
    }

    def createManufacturer = { createLoopData ->
        manufacturerTAIWAN = new Manufacturer(name: "manufacturerTAIWAN", title: "УБйжђатЋєTAIWAN", email: "A@xx.com", address: "жФўжЏётИѓж╣йтЪЋтЇђСИГУЈ»Уи»99УЎЪ", country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)
        manufacturerJAPAN = new Manufacturer(name: "manufacturerJAPAN", title: "УБйжђатЋєJAPAN", email: "B@xx.com", address: "тй░тїќуИБтЊАТъЌжј«СИЅТ░ЉУи»7УЎЪ", country: Country.JAPAN, site: site1).save(failOnError: true, flush: true)
        manufacturerHONGKONG = new Manufacturer(name: "manufacturerHONGKONG", title: "УБйжђатЋєHONGKONG", email: "HONGKONG@xx.com", address: "тй░тїќуИБтЊАТъЌжј«СИЅТ░ЉУи»7УЎЪ", country: Country.HONGKONG, site: site1).save(failOnError: true, flush: true)
        manufacturerMEXICO = new Manufacturer(name: "manufacturerMEXICO", title: "УБйжђатЋєMEXICO", email: "MEXICO@xx.com", address: "MEXICO", country: Country.MEXICO, site: site1).save(failOnError: true, flush: true)
        manufacturerCHINA = new Manufacturer(name: "manufacturerCHINA", title: "УБйжђатЋєCHINA", email: "CHINA@xx.com", address: "CHINA", country: Country.CHINA, site: site1).save(failOnError: true, flush: true)
        manufacturerITALY = new Manufacturer(name: "manufacturerITALY", title: "УБйжђатЋєITALY", email: "ITALY@xx.com", address: "ITALY", country: Country.ITALY, site: site1).save(failOnError: true, flush: true)
        manufacturerUNITEDKINGDOM = new Manufacturer(name: "manufacturerUNITEDKINGDOM", title: "УБйжђатЋєUNITEDKINGDOM", email: "UNITEDKINGDOM@xx.com", address: "UNITEDKINGDOM", country: Country.UNITEDKINGDOM, site: site1).save(failOnError: true, flush: true)
        manufacturerInspect = new Manufacturer(name: "manufacturerInspectCreatedBySupplier", title: "ТфбжЕЌтЋє", email: "ABB@xx.com", address: "тЈ░тїЌтИѓуЙЁТќ»удЈУи»1УЎЪ", country: Country.TAIWAN, isSupplier: true, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopmanufacturer = new Manufacturer(name: "loopmanufacturer_${it}", title: "УБйжђатЋє_${it}", email: "ma_${it}@xx.com", address: "тй░тїќуИБтЊАТъЌжј«СИЅТ░ЉУи»${it}УЎЪ", country: Country.TAIWAN, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopmanufacturer1 = loopmanufacturer)
            }
            loopmanufacturer_issupplier1 = new Manufacturer(name: "loopmanufacturer_issupplier1", title: "СЙЏТЄЅУБйжђатЋє_1", isSupplier: true, email: "AAA_1@xx.com", address: "тЈ░тїЌтИѓТќ░ућЪтЇЌУи»1УЎЪ", country: Country.TAIWAN, site: loopsite1).save(failOnError: true, flush: true)
        }
    }

    def createSupplier = { createLoopData ->

        supplier1 = new Supplier(name: "sup1", title: "УѓЦТќЎСЙЏТЄЅтЋє", email: "AAA@xx.com", address: "тЈ░тїЌтИѓТќ░ућЪтЇЌУи»111УЎЪ", country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)
        supplier2 = new Supplier(name: "sup2", title: "УЙ▓УЌЦСЙЏТЄЅтЋє", email: "BBB@xx.com", address: "тЈ░тїЌтИѓт┐атГЮТЮ▒Уи»222УЎЪ", country: Country.JAPAN, site: site1).save(failOnError: true, flush: true)
        supplierInspect = new Supplier(name: "supInspect", title: "ТфбжЕЌтЋє", email: "ABB@xx.com", address: "тЈ░тїЌтИѓуЙЁТќ»удЈУи»1УЎЪ", country: Country.TAIWAN, isManufacturer: true, manufacturer: manufacturerInspect, site: site1).save(failOnError: true, flush: true)
        manufacturerInspect.supplier = supplierInspect

        if (createLoopData) {
            (1..100).each {
                def loopsupplier = new Supplier(name: "loopsupplier_${it}", title: "СЙЏТЄЅтЋє_${it}", email: "AAA_${it}@xx.com", address: "тЈ░тїЌтИѓТќ░ућЪтЇЌУи»${it}УЎЪ", country: Country.TAIWAN, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopsupplier1 = loopsupplier)
            }
            loopsupplier_ismanufacturer1 = new Supplier(name: "loopsupplier_ismanufacturer_1", isManufacturer: true, title: "СЙЏТЄЅУБйжђатЋє_1", email: "AAA_1@xx.com", address: "тЈ░тїЌтИѓТќ░ућЪтЇЌУи»1УЎЪ", country: Country.TAIWAN, manufacturer: loopmanufacturer_issupplier1, site: loopsite1).save(failOnError: true, flush: true)
            loopmanufacturer_issupplier1.supplier = loopsupplier_ismanufacturer1
            loopmanufacturer_issupplier1.save(failOnError: true, flush: true)
        }
    }

    def createWorkstation = { createLoopData ->

        workstation11 = new Workstation(name: "fct1ws1", title: "т╗а1тиЦСйюуФЎ1", factory: factory1, site: site1).save(failOnError: true, flush: true)
        workstation12 = new Workstation(name: "fct1ws2", title: "т╗а1тиЦСйюуФЎ2", factory: factory1, site: site1).save(failOnError: true, flush: true)
        workstation21 = new Workstation(name: "fct2ws1", title: "т╗а2тиЦСйюуФЎ1", factory: factory2, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopworkstation = new Workstation(name: "loopworkstation_${it}", title: "тиЦСйюуФЎ_${it}", factory: loopfactory1, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopworkstation1 = loopworkstation)
            }
        }
    }

    def createOperationCategoryLayer1 = { createLoopData ->

        operationCategoryLayer11 = new OperationCategoryLayer1(name: "opca1", title: "уе«УІЌУѕЄТјЦуЕЌ", site: site1).save(failOnError: true, flush: true)
        operationCategoryLayer12 = new OperationCategoryLayer1(name: "opca2", title: "УЙ▓та┤Т║ќтѓЎ", site: site1).save(failOnError: true, flush: true)
        operationCategoryLayer13 = new OperationCategoryLayer1(name: "opca3", title: "ТайтЪ╣у«Ауљє", site: site1).save(failOnError: true, flush: true)
        operationCategoryLayer1Other = new OperationCategoryLayer1(name: "opcaOther", title: "тЁХС╗ќСйюТЦГ", site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopoperationcategory = new OperationCategoryLayer1(name: "loopopca_${it}", title: "УБйуеІжАъ_${it}", site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopoperationcategory1 = loopoperationcategory)
            }
        }
    }

    def createOperation = { createLoopData ->

        operation1 = new Operation(name: "opt1", title: "ТќйУѓЦ", operationCategoryLayer1: operationCategoryLayer13, site: site1).save(failOnError: true, flush: true)
        operation2 = new Operation(name: "opt2", title: "жЎцУЇЅ", operationCategoryLayer1: operationCategoryLayer13, site: site1).save(failOnError: true, flush: true)
        operation3 = new Operation(name: "opt3", title: "уЌЁУЪ▓т«│у«Ауљє", operationCategoryLayer1: operationCategoryLayer11, site: site1).save(failOnError: true, flush: true)
        operation4 = new Operation(name: "opt4", title: "тюЪтБцТћ╣УЅ»", operationCategoryLayer1: operationCategoryLayer12, site: site1).save(failOnError: true, flush: true)
        operationInspect = new Operation(name: "optInspect", title: "ТфбжЕЌ", operationCategoryLayer1: operationCategoryLayer1Other, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopoperation = new Operation(name: "loopoperation_${it}", title: "УБйуеІ_${it}", site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopoperation1 = loopoperation)
            }
        }
    }

    def createItemStage = { createLoopData ->

        product1ProductBrand1Stage1 = new ItemStage(item: product1ProductBrand1, sequence: 10, title: "ТњГуе«ТюЪ", site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1Stage2 = new ItemStage(item: product1ProductBrand1, sequence: 20, title: "тГЋуЕЌТюЪ", site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1Stage3 = new ItemStage(item: product1ProductBrand1, sequence: 30, title: "жќІУі▒ТюЪ", site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1Stage4 = new ItemStage(item: product1ProductBrand1, sequence: 40, title: "тљљух▓ТюЪ", site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                new ItemStage(item: loopitem1, sequence: it*10, title: "ТюЪуеІ_${it}", site: loopsite1).save(failOnError: true, flush: true)
            }
        }
    }

    def createItemRegisteredNum = { createLoopData ->

        semiProduct1ProductBrand1RigisteredNumTW = new ItemRegisteredNum(item: semiProduct1ProductBrand1, manufacturer: manufacturerInspect, country: Country.TAIWAN, registeredNum: "SEMI1-13960043", site: site1).save(failOnError: true, flush: true)

        material1MaterialBrand1RigisteredNumTW = new ItemRegisteredNum(item: material1MaterialBrand1, manufacturer: manufacturerTAIWAN, country: Country.TAIWAN, registeredNum: "M1-13960043", site: site1).save(failOnError: true, flush: true)
        material1MaterialBrand1RigisteredNumJP = new ItemRegisteredNum(item: material1MaterialBrand1, manufacturer: manufacturerTAIWAN, country: Country.JAPAN, registeredNum: "M1-5jkw923a", site: site1).save(failOnError: true, flush: true)
        material1MaterialBrand1RigisteredNumHK = new ItemRegisteredNum(item: material1MaterialBrand1, manufacturer: manufacturerTAIWAN, country: Country.HONGKONG, registeredNum: "M1-8dssHK13254", site: site1).save(failOnError: true, flush: true)

        material2MaterialBrand1RigisteredNumTW = new ItemRegisteredNum(item: material2MaterialBrand1, manufacturer: manufacturerHONGKONG, country: Country.TAIWAN, registeredNum: "M2-13960043", site: site1).save(failOnError: true, flush: true)
        material2MaterialBrand2RigisteredNumTW = new ItemRegisteredNum(item: material2MaterialBrand2, manufacturer: manufacturerHONGKONG, country: Country.TAIWAN, registeredNum: "M2-13960043", site: site1).save(failOnError: true, flush: true)
        material3MaterialBrand1RigisteredNumTW = new ItemRegisteredNum(item: material3MaterialBrand1, manufacturer: manufacturerMEXICO, country: Country.TAIWAN, registeredNum: "M3-13960043", site: site1).save(failOnError: true, flush: true)

        material5MaterialBrand2RigisteredNumTW = new ItemRegisteredNum(item: material5MaterialBrand2, manufacturer: manufacturerITALY, country: Country.TAIWAN, registeredNum: "M5-13960043", site: site1).save(failOnError: true, flush: true)
        material5MaterialBrand2RigisteredNumUK = new ItemRegisteredNum(item: material5MaterialBrand2, manufacturer: manufacturerITALY, country: Country.UNITEDKINGDOM, registeredNum: "M5-mdsoiw245456", site: site1).save(failOnError: true, flush: true)
        material5MaterialBrand2RigisteredNumMC = new ItemRegisteredNum(item: material5MaterialBrand2, manufacturer: manufacturerITALY, country: Country.MEXICO, registeredNum: "M5-52401234", site: site1).save(failOnError: true, flush: true)

        material6MaterialBrand2RigisteredNumTW = new ItemRegisteredNum(item: material6MaterialBrand2, manufacturer: manufacturerCHINA, country: Country.TAIWAN, registeredNum: "M6-13960043", site: site1).save(failOnError: true, flush: true)
        material7MaterialBrand2RigisteredNumTW = new ItemRegisteredNum(item: material7MaterialBrand2, manufacturer: manufacturerUNITEDKINGDOM, country: Country.TAIWAN, registeredNum: "M7-13960043", site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..29).each {
                new ItemRegisteredNum(item: loopitem1, manufacturer: loopmanufacturer1, country: Country.values()[it], registeredNum: "registeredNum_${it}", site: loopsite1).save(failOnError: true, flush: true)
            }
        }
    }

    def createBillOfMaterial = { createLoopData ->
    }

    def createBillOfMaterialDet = { createLoopData ->
    }

    def createWarehouse = { createLoopData ->

        materialWarehouse11 = new Warehouse(name: "materialWarehouse11", title: "т╗а1тјЪТќЎтђЅ1", factory: factory1, site: site1).save(failOnError: true, flush: true)
        productWarehouse11 = new Warehouse(name: "productWarehouse11", title: "т╗а1ТѕљтЊЂтђЅ1", factory: factory1, site: site1).save(failOnError: true, flush: true)
        materialWarehouse21 = new Warehouse(name: "materialWarehouse21", title: "т╗а2тјЪТќЎтђЅ1", factory: factory2, site: site1).save(failOnError: true, flush: true)
        productWarehouse21 = new Warehouse(name: "productWarehouse21", title: "т╗а2ТѕљтЊЂтђЅ1", factory: factory2, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopwarehouse = new Warehouse(name: "loopwarehouse_${it}", title: "тђЅт║Ф_${it}", factory: loopfactory1, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopwarehouse1 = loopwarehouse)
            }
        }
    }

    def createWarehouseLocation = { createLoopData ->

        materialWarehouseLocation111 = new WarehouseLocation(name: "materialWarehouseLocation111", warehouse: materialWarehouse11, title: "т╗а1тјЪТќЎтё▓СйЇ11-УѓЦТќЎ", site: site1).save(failOnError: true, flush: true)
        materialWarehouseLocation112 = new WarehouseLocation(name: "materialWarehouseLocation112", warehouse: materialWarehouse11, title: "т╗а1тјЪТќЎтё▓СйЇ12-УЙ▓УЌЦ", site: site1).save(failOnError: true, flush: true)
        productWarehouseLocation111 = new WarehouseLocation(name: "productWarehouseLocation111", warehouse: productWarehouse11, title: "т╗а1ТѕљтЊЂтё▓СйЇ11", site: site1).save(failOnError: true, flush: true)
        productWarehouseLocation112 = new WarehouseLocation(name: "productWarehouseLocation112", warehouse: productWarehouse11, title: "т╗а1ТѕљтЊЂтё▓СйЇ12", site: site1).save(failOnError: true, flush: true)

        materialWarehouseLocation211 = new WarehouseLocation(name: "materialWarehouseLocation211", warehouse: materialWarehouse21, title: "т╗а2тјЪТќЎтё▓СйЇ11-УѓЦТќЎ", site: site1).save(failOnError: true, flush: true)
        materialWarehouseLocation212 = new WarehouseLocation(name: "materialWarehouseLocation212", warehouse: materialWarehouse21, title: "т╗а2тјЪТќЎтё▓СйЇ12-УЙ▓УЌЦ", site: site1).save(failOnError: true, flush: true)
        productWarehouseLocation211 = new WarehouseLocation(name: "productWarehouseLocation211", warehouse: productWarehouse21, title: "т╗а2ТѕљтЊЂтё▓СйЇ11", site: site1).save(failOnError: true, flush: true)
        productWarehouseLocation212 = new WarehouseLocation(name: "productWarehouseLocation212", warehouse: productWarehouse21, title: "т╗а2ТѕљтЊЂтё▓СйЇ12", site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopwarehouselocation = new WarehouseLocation(name: "loopwarehouselocation_${it}", warehouse: loopwarehouse1, title: "тё▓СйЇ_${it}", site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopwarehouselocation1 = loopwarehouselocation)
            }
        }
    }

    def createTypeName = { createLoopData ->

        typeNameTransactionSTORAGE = new TypeName(sheetType: SheetType.TRANSACTION, name: "1111", title: "тЁЦт║ФуЋ░тІЋтќ«ТЊџ", transactionType: TransactionType.STORAGE, site: site1).save(failOnError: true, flush: true)
        typeNameReturnTransactionSTORAGE = new TypeName(sheetType: SheetType.TRANSACTION, name: "1112", title: "тЄ║т║ФуЋ░тІЋтќ«ТЊџ", transactionType: TransactionType.STORAGE, multiplier: -1, site: site1).save(failOnError: true, flush: true)
        typeNameTransactionSALE = new TypeName(sheetType: SheetType.TRANSACTION, name: "112", title: "жіиУ▓еуЋ░тІЋтќ«ТЊџ", sheetFormatType: SheetFormatType.MONTH, yearDigit: 3, transactionType: TransactionType.SALE, site: site1).save(failOnError: true, flush: true)
        typeNameTransactionREQUISITION = new TypeName(sheetType: SheetType.TRANSACTION, name: "113", title: "жаўућеуЋ░тІЋтќ«ТЊџ", sheetFormatType: SheetFormatType.RUNNINGNUMBER, runningDigit: 5, transactionType: TransactionType.REQUISITION, site: site1).save(failOnError: true, flush: true)
        typeNameTransactionADJUSTMENT = new TypeName(sheetType: SheetType.TRANSACTION, name: "115", title: "Уф┐ТЋ┤уЋ░тІЋтќ«ТЊџ", sheetFormatType: SheetFormatType.MANUAL, transactionType: TransactionType.ADJUSTMENT, site: site1).save(failOnError: true, flush: true)
      
        typeNameCustomerOrder = new TypeName(sheetType: SheetType.CUSTOMERORDER, name: "220", title: "Уеѓтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameSaleSheet = new TypeName(sheetType: SheetType.SALESHEET, name: "230", title: "жіиУ▓етќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameSaleReturnSheet = new TypeName(sheetType: SheetType.SALERETURNSHEET, name: "240", title: "жіижђђтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)

        typeNamePurchaseSheet = new TypeName(sheetType: SheetType.PURCHASESHEET, name: "340", title: "жђ▓У▓етќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNamePurchaseReturnSheet = new TypeName(sheetType: SheetType.PURCHASERETURNSHEET, name: "350", title: "жђђУ▓етќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameManufactureOrder = new TypeName(sheetType: SheetType.MANUFACTUREORDER, name: "511", title: "т╗атЁДУБйС╗ц", sheetFormatType: SheetFormatType.DAY, manufactureType: ManufactureType.FACTORY, site: site1).save(failOnError: true, flush: true)
        typeNameOutSrcManufactureOrder = new TypeName(sheetType: SheetType.MANUFACTUREORDER, name: "512", title: "УеЌтцќУБйС╗ц", sheetFormatType: SheetFormatType.DAY, manufactureType: ManufactureType.OUTSRC, site: site1).save(failOnError: true, flush: true)
        // typeNameManufactureOrderRework = new TypeName(sheetType: SheetType.REWORKORDER, name: "230", title: "жіиУ▓етќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameMaterialSheet = new TypeName(sheetType: SheetType.MATERIALSHEET, name: "540", title: "т╗атЁДжаўТќЎтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameMaterialReturnSheet = new TypeName(sheetType: SheetType.MATERIALRETURNSHEET, name: "560", title: "т╗атЁДжђђТќЎтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameOutSrcMaterialSheet = new TypeName(sheetType: SheetType.OUTSRCMATERIALSHEET, name: "550", title: "УеЌтцќжаўТќЎтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameOutSrcMaterialReturnSheet = new TypeName(sheetType: SheetType.OUTSRCMATERIALRETURNSHEET, name: "570", title: "УеЌтцќжђђТќЎтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)

        typeNameStockInSheet = new TypeName(sheetType: SheetType.STOCKINSHEET, name: "580", title: "ућЪућбтЁЦт║Фтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameOutSrcPurchaseSheet = new TypeName(sheetType: SheetType.OUTSRCPURCHASESHEET, name: "590", title: "УеЌтцќжђ▓У▓етќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameOutSrcPurchaseReturnSheet = new TypeName(sheetType: SheetType.OUTSRCPURCHASERETURNSHEET, name: "5A1", title: "УеЌтцќжђђУ▓етќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        
        typeNameTransferOrderRELEASE = new TypeName(sheetType: SheetType.ORDERRELEASE, name: "D11", title: "т╗атЁДТіЋТќЎтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameTransferOrderTRANSFER = new TypeName(sheetType: SheetType.OPERATIONTRANSFER, name: "D21", title: "т╗атЁДуД╗УйЅтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameTransferOrderSTORAGE = new TypeName(sheetType: SheetType.OPERATIONSTORAGE, name: "D31", title: "т╗атЁДтЁЦт║Фтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameOutSrcTransferOrderRELEASE = new TypeName(sheetType: SheetType.ORDERRELEASE, name: "D12", title: "УеЌтцќТіЋТќЎтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameOutSrcTransferOrderTRANSFER = new TypeName(sheetType: SheetType.OPERATIONTRANSFER, name: "D22", title: "УеЌтцќуД╗УйЅтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        typeNameOutSrcTransferOrderSTORAGE = new TypeName(sheetType: SheetType.OPERATIONSTORAGE, name: "D32", title: "УеЌтцќтЁЦт║Фтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)
        // typeNameWorkReport = new TypeName(sheetType: SheetType.WORKREPORT, name: "D4", title: "та▒тиЦтќ«", sheetFormatType: SheetFormatType.DAY, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def looptypenameTRANSACTION = new TypeName(sheetType: SheetType.TRANSACTION, name: "looptypename_${it}", title: "тЁЦт║ФуЋ░тІЋтќ«ТЊџ", transactionType: TransactionType.STORAGE, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (looptypenameTRANSACTION1 = looptypenameTRANSACTION)
            }

            looptypenameCUSTOMERORDER1 = new TypeName(sheetType: SheetType.CUSTOMERORDER, name: "looptypename_CustomerOrder", title: "Уеѓтќ«", sheetFormatType: SheetFormatType.DAY, site: loopsite1).save(failOnError: true, flush: true)
            looptypenameSALESHEET1 = new TypeName(sheetType: SheetType.SALESHEET, name: "looptypename_SaleSheet", title: "жіиУ▓етќ«", sheetFormatType: SheetFormatType.DAY, site: loopsite1).save(failOnError: true, flush: true)
            looptypenameSALERETURNSHEET1 = new TypeName(sheetType: SheetType.SALERETURNSHEET, name: "looptypename_SaleReturnSheet", title: "жіижђђтќ«", sheetFormatType: SheetFormatType.DAY, site: loopsite1).save(failOnError: true, flush: true)

            looptypenamePURCHASESHEET1 = new TypeName(sheetType: SheetType.PURCHASESHEET, name: "looptypename_PurchaseSheet", title: "жђ▓У▓етќ«", sheetFormatType: SheetFormatType.DAY, site: loopsite1).save(failOnError: true, flush: true)
            looptypenamePURCHASERETURNSHEET1 = new TypeName(sheetType: SheetType.PURCHASERETURNSHEET, name: "looptypename_PurchaseReturnSheet", title: "жђђУ▓етќ«", sheetFormatType: SheetFormatType.DAY, site: loopsite1).save(failOnError: true, flush: true)
            looptypenameMANUFACTUREORDER1 = new TypeName(sheetType: SheetType.MANUFACTUREORDER, name: "looptypename_ManufactureOrder", title: "т╗атЁДУБйС╗ц", sheetFormatType: SheetFormatType.DAY, manufactureType: ManufactureType.FACTORY, site: loopsite1).save(failOnError: true, flush: true)
            looptypenameOUTSRCMANUFACTUREORDER1 = new TypeName(sheetType: SheetType.MANUFACTUREORDER, name: "looptypename_OutSrcManufactureOrder", title: "УеЌтцќУБйС╗ц", sheetFormatType: SheetFormatType.DAY, manufactureType: ManufactureType.OUTSRC, site: loopsite1).save(failOnError: true, flush: true)

            looptypenameMATERIALSHEET1 = new TypeName(sheetType: SheetType.MATERIALSHEET, name: "looptypename_MaterialSheet", title: "т╗атЁДжаўТќЎтќ«", sheetFormatType: SheetFormatType.DAY, site: loopsite1).save(failOnError: true, flush: true)
            looptypenameMATERIALRETURNSHEET1 = new TypeName(sheetType: SheetType.MATERIALRETURNSHEET, name: "looptypename_MaterialReturnSheet", title: "т╗атЁДжђђТќЎтќ«", sheetFormatType: SheetFormatType.DAY, site: loopsite1).save(failOnError: true, flush: true)
            looptypenameOUTSRCMATERIALSHEET1 = new TypeName(sheetType: SheetType.OUTSRCMATERIALSHEET, name: "looptypename_OutSrcMaterialSheet", title: "УеЌтцќжаўТќЎтќ«", sheetFormatType: SheetFormatType.DAY, site: loopsite1).save(failOnError: true, flush: true)
            looptypenameOUTSRCMATERIALRETURNSHEET1 = new TypeName(sheetType: SheetType.OUTSRCMATERIALRETURNSHEET, name: "looptypename_OutSrcMaterialReturnSheet", title: "УеЌтцќжђђТќЎтќ«", sheetFormatType: SheetFormatType.DAY, site: loopsite1).save(failOnError: true, flush: true)

            looptypenameSTOCKINSHEET1 = new TypeName(sheetType: SheetType.STOCKINSHEET, name: "looptypename_StockInSheet", title: "ућЪућбтЁЦт║Фтќ«", sheetFormatType: SheetFormatType.DAY, site: loopsite1).save(failOnError: true, flush: true)
            looptypenameOUTSRCPURCHASESHEET1 = new TypeName(sheetType: SheetType.OUTSRCPURCHASESHEET, name: "looptypename_OutSrcPurchaseSheet", title: "УеЌтцќжђ▓У▓етќ«", sheetFormatType: SheetFormatType.DAY, site: loopsite1).save(failOnError: true, flush: true)
            looptypenameOUTSRCPURCHASERETURNSHEET1 = new TypeName(sheetType: SheetType.OUTSRCPURCHASERETURNSHEET, name: "looptypename_OutSrcPurchaseReturnSheetDet", title: "УеЌтцќжђђУ▓етќ«", sheetFormatType: SheetFormatType.DAY, site: loopsite1).save(failOnError: true, flush: true)
        }
    }

    def createCustomerOrder = { createLoopData ->
        //Уеѓтќ«
        customerOrder1 = new CustomerOrder(typeName: typeNameCustomerOrder, name: "001", factory: factory1, customer: customer1, site: site1).save(failOnError: true, flush: true)
        customerOrder2 = new CustomerOrder(typeName: typeNameCustomerOrder, name: "002", factory: factory1, customer: customer1, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopcustomerorder = new CustomerOrder(typeName: looptypenameCUSTOMERORDER1, name: "${it}", factory: loopfactory1, customer: loopcustomer1, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopcustomerorder1 = loopcustomerorder)
            }
        }

    }

    def createCustomerOrderDet = { createLoopData ->
        //Уеѓтќ«
        customerOrderDet11 = new CustomerOrderDet(header: customerOrder1, typeName: customerOrder1.typeName, name: customerOrder1.name, sequence: 1, item: product1ProductBrand1, unit: product1ProductBrand1.unit, qty: 10000000, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopcustomerorderdet = new CustomerOrderDet(header: loopcustomerorder1, typeName: loopcustomerorder1.typeName, name: loopcustomerorder1.name, sequence: it, item: loopitem1, unit: loopitem1.unit, qty: 10000000, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopcustomerorderdet1 = loopcustomerorderdet)
            }
        }
    }

    def createManufactureOrder = { createLoopData ->

        //тЇіТѕљтЊЂУБйС╗ц
        manufactureOrder1 = new ManufactureOrder(typeName: typeNameManufactureOrder, name: "001", manufactureType: typeNameManufactureOrder.manufactureType, status: ManufactureOrderStatus.APPROVED, factory: workstation11.factory, workstation: workstation11,
            item: semiProduct1ProductBrand1, batchName: "semiProduct1ProductBrand1Batch1", expectQty: 500000, site: site1).save(failOnError: true, flush: true)
        // def semiProduct1ProductBrand1Batch1 = new Batch(name: "semiProduct1ProductBrand1Batch1", item: semiProduct1ProductBrand1, title: semiProduct1ProductBrand1.title, spec: semiProduct1ProductBrand1.spec, unit: semiProduct1ProductBrand1.unit,
        //         batchSourceType: BatchSourceType.MANUFACTURE, manufactureOrder: manufactureOrder1,
        //         dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", expectQty: 500000, country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)

        //ТѕљтЊЂУБйС╗ц
        manufactureOrder2 = new ManufactureOrder(typeName: typeNameManufactureOrder, name: "002", manufactureType: typeNameManufactureOrder.manufactureType, status: ManufactureOrderStatus.APPROVED, factory: workstation11.factory, workstation: workstation11,
            item: product1ProductBrand1, batchName: "product1ProductBrand1Batch1", expectQty: 1000000, site: site1).save(failOnError: true, flush: true)
        // def product1ProductBrand1Batch1 = new Batch(name: "product1ProductBrand1Batch1", item: product1ProductBrand1, title: product1ProductBrand1.title, spec: product1ProductBrand1.spec, unit: product1ProductBrand1.unit,
        //         batchSourceType: BatchSourceType.MANUFACTURE, manufactureOrder: manufactureOrder2,
        //         dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", expectQty: 1000000, country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)

        //тЇіТѕљтЊЂУеЌтцќУБйС╗ц
        manufactureOrder3 = new ManufactureOrder(typeName: typeNameOutSrcManufactureOrder, name: "003", manufactureType: typeNameOutSrcManufactureOrder.manufactureType, status: ManufactureOrderStatus.APPROVED, factory: factory1, supplier: supplierInspect,
            item: semiProduct1ProductBrand1, batchName: "semiProduct1ProductBrand1Batch2", expectQty: 10000, site: site1).save(failOnError: true, flush: true)
        // def semiProduct1ProductBrand1Batch2 = new Batch(name: "semiProduct1ProductBrand1Batch2", item: semiProduct1ProductBrand1, title: semiProduct1ProductBrand1.title, spec: semiProduct1ProductBrand1.spec, unit: semiProduct1ProductBrand1.unit,
        //         batchSourceType: BatchSourceType.OUTSRCMANUFACTURE, manufacturer: manufacturerInspect, manufactureOrder: manufactureOrder3,
        //         dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", expectQty: 1000, country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)


        //тЙЁуЎ╝ТћЙУБйС╗ц
        manufactureOrder4 = new ManufactureOrder(typeName: typeNameManufactureOrder, name: "004", manufactureType: typeNameManufactureOrder.manufactureType, factory: workstation11.factory, workstation: workstation11,
            item: product1ProductBrand1, batchName: "product1ProductBrand1Batch2", expectQty: 1000000, site: site1).save(failOnError: true, flush: true)
        // def product1ProductBrand1Batch2 = new Batch(name: "product1ProductBrand1Batch2", item: product1ProductBrand1, title: product1ProductBrand1.title, spec: product1ProductBrand1.spec, unit: product1ProductBrand1.unit,
        //         batchSourceType: BatchSourceType.MANUFACTURE, manufactureOrder: manufactureOrder4,
        //         dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", expectQty: 1000000, country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)

        //ућЪућбСИГУБйС╗ц
        manufactureOrder5 = new ManufactureOrder(typeName: typeNameManufactureOrder, name: "005", manufactureType: typeNameManufactureOrder.manufactureType, status: ManufactureOrderStatus.INPROCESS, factory: workstation11.factory, workstation: workstation11,
            item: product1ProductBrand1, batchName: "product1ProductBrand1Batch3", expectQty: 1000000, site: site1).save(failOnError: true, flush: true)
        // def product1ProductBrand1Batch3 = new Batch(name: "product1ProductBrand1Batch3", item: product1ProductBrand1, title: product1ProductBrand1.title, spec: product1ProductBrand1.spec, unit: product1ProductBrand1.unit,
        //         batchSourceType: BatchSourceType.MANUFACTURE, manufactureOrder: manufactureOrder5,
        //         dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", expectQty: 1000000, country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)

        //ТїЄт«џухљТАѕУБйС╗ц
        manufactureOrder6 = new ManufactureOrder(typeName: typeNameManufactureOrder, name: "006", manufactureType: typeNameManufactureOrder.manufactureType, status: ManufactureOrderStatus.ASSIGNEDFINISHED, factory: workstation12.factory, workstation: workstation12,
            item: product1ProductBrand1, batchName: "product1ProductBrand1Batch4", expectQty: 1000000, site: site1).save(failOnError: true, flush: true)
        // def product1ProductBrand1Batch4 = new Batch(name: "product1ProductBrand1Batch4", item: product1ProductBrand1, title: product1ProductBrand1.title, spec: product1ProductBrand1.spec, unit: product1ProductBrand1.unit,
        //         batchSourceType: BatchSourceType.MANUFACTURE, manufactureOrder: manufactureOrder6,
        //         dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", expectQty: 1000000, country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)
        manufactureOrderChangeOrder = new ManufactureOrderChangeOrder(manufactureOrder: manufactureOrder6, typeName: manufactureOrder6.typeName, name :manufactureOrder6.name, sequence: 1,
            originVersion: manufactureOrder6.version, originEditor: manufactureOrder6.editor, originCreator: manufactureOrder6.creator, originDateCreated: manufactureOrder6.dateCreated, originLastUpdated: manufactureOrder6.lastUpdated,
            executionDate: manufactureOrder6.executionDate, originExecutionDate: manufactureOrder6.executionDate,
            status: ManufactureOrderStatus.ASSIGNEDFINISHED, originStatus: ManufactureOrderStatus.PENDING,
            factory: manufactureOrder6.factory, originFactoryId: manufactureOrder6.factory.id,
            workstation: manufactureOrder6.workstation, originWorkstationId: manufactureOrder6.workstation?.id,
            supplier: manufactureOrder6.supplier, originSupplierId: manufactureOrder6.supplier?.id,
            customerOrderDet: manufactureOrder6.customerOrderDet, originCustomerOrderDetId: manufactureOrder6.customerOrderDet?.id,
            batchName: manufactureOrder6.batchName, originBatchName: manufactureOrder6.batchName,
            item: manufactureOrder6.item, originItemId: manufactureOrder6.item.id,
            expectQty: manufactureOrder6.expectQty, originExpectQty: manufactureOrder6.expectQty, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..50).each {
                def loopmanufactureorder = new ManufactureOrder(typeName: looptypenameMANUFACTUREORDER1, name: "${it}", manufactureType: typeNameManufactureOrder.manufactureType, factory: loopfactory1, workstation: loopworkstation1,
                    item: Item.findByNameAndSite("loopitem_${it}", loopsite1), batchName: "loopbatch_${it}", expectQty: 10000000, site: loopsite1).save(failOnError: true, flush: true)
                // new Batch(name: "loopbatch_${it}", item: loopitem1, title: loopitem1.title, spec: loopitem1.spec, unit: loopitem1.unit,
                //         batchSourceType: BatchSourceType.MANUFACTURE, manufactureOrder: loopmanufactureOrder,
                //         dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗${it}", expectQty: 1000000, country: Country.TAIWAN, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopmanufactureorder1 = loopmanufactureorder)
            }
            (51..100).each {
                def loopmanufactureorder = new ManufactureOrder(typeName: looptypenameOUTSRCMANUFACTUREORDER1, name: "${it}", manufactureType: typeNameOutSrcManufactureOrder.manufactureType, factory: loopfactory1, supplier: loopsupplier_ismanufacturer1,
                    item: Item.findByNameAndSite("loopitem_${it}", loopsite1), batchName: "loopbatch_${it}", expectQty: 10000000, site: loopsite1).save(failOnError: true, flush: true)
                // new Batch(name: "loopbatch_${it}", item: loopitem1, title: loopitem1.title, spec: loopitem1.spec, unit: loopitem1.unit,
                //         batchSourceType: BatchSourceType.OUTSRCMANUFACTURE, manufacturer: loopmanufacturer1, manufactureOrder: loopmanufactureOrder, 
                //         dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗${it}", expectQty: 1000000, country: Country.TAIWAN, site: loopsite1).save(failOnError: true, flush: true)
                it != 51 ?: (loopmanufactureorder51 = loopmanufactureorder)

            }
        }
    }

    def createBatch = { createLoopData ->

        //ТѕљтЊЂУБйС╗ц2ТЅ╣УЎЪ product1ProductBrand1Batch1
        product1ProductBrand1Batch1 = new Batch(name: manufactureOrder2.batchName, item: product1ProductBrand1, title: product1ProductBrand1.title, spec: product1ProductBrand1.spec, unit: product1ProductBrand1.unit,
                batchSourceType: BatchSourceType.MANUFACTURE, manufactureOrder: manufactureOrder2,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", expectQty: 1000000, country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)

        //тЙЁуЎ╝ТћЙУБйС╗ц4ТЅ╣УЎЪ product1ProductBrand1Batch2
        product1ProductBrand1Batch2 = new Batch(name: manufactureOrder4.batchName, item: product1ProductBrand1, title: product1ProductBrand1.title, spec: product1ProductBrand1.spec, unit: product1ProductBrand1.unit,
                batchSourceType: BatchSourceType.MANUFACTURE, manufactureOrder: manufactureOrder4,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", expectQty: 1000000, country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)

        //ућЪућбСИГУБйС╗ц5ТЅ╣УЎЪ product1ProductBrand1Batch3
        product1ProductBrand1Batch3 = new Batch(name: manufactureOrder5.batchName, item: product1ProductBrand1, title: product1ProductBrand1.title, spec: product1ProductBrand1.spec, unit: product1ProductBrand1.unit,
                batchSourceType: BatchSourceType.MANUFACTURE, manufactureOrder: manufactureOrder5,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", expectQty: 1000000, country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)

        //ТїЄт«џухљТАѕУБйС╗ц6ТЅ╣УЎЪ product1ProductBrand1Batch4
        product1ProductBrand1Batch4 = new Batch(name: manufactureOrder6.batchName, item: product1ProductBrand1, title: product1ProductBrand1.title, spec: product1ProductBrand1.spec, unit: product1ProductBrand1.unit,
                batchSourceType: BatchSourceType.MANUFACTURE, manufactureOrder: manufactureOrder6,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", expectQty: 1000000, country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)

        //тЇіТѕљтЊЂУБйС╗ц1ТЅ╣УЎЪ semiProduct1ProductBrand1Batch1
        semiProduct1ProductBrand1Batch1 = new Batch(name: manufactureOrder1.batchName, item: semiProduct1ProductBrand1, title: semiProduct1ProductBrand1.title, spec: semiProduct1ProductBrand1.spec, unit: semiProduct1ProductBrand1.unit,
                batchSourceType: BatchSourceType.MANUFACTURE, manufactureOrder: manufactureOrder1,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", expectQty: 500000, country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)

        //тЇіТѕљтЊЂУеЌтцќУБйС╗ц3ТЅ╣УЎЪ semiProduct1ProductBrand1Batch2
        semiProduct1ProductBrand1Batch2 = new Batch(name: manufactureOrder3.batchName, item: semiProduct1ProductBrand1, title: semiProduct1ProductBrand1.title, spec: semiProduct1ProductBrand1.spec, unit: semiProduct1ProductBrand1.unit,
                batchSourceType: BatchSourceType.OUTSRCMANUFACTURE, manufacturer: manufacturerInspect, manufactureOrder: manufactureOrder3,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", expectQty: 1000, country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)


        material1MaterialBrand1Batch1 = new Batch(name: "material1MaterialBrand1Batch1", item: material1MaterialBrand1, title: material1MaterialBrand1.title, spec: material1MaterialBrand1.spec, unit: material1MaterialBrand1.unit,
                batchSourceType: BatchSourceType.PURCHASE, manufacturer: manufacturerTAIWAN,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)

        material2MaterialBrand1Batch1 = new Batch(name: "material2MaterialBrand1Batch1", item: material2MaterialBrand1, title: material2MaterialBrand1.title, spec: material2MaterialBrand1.spec, unit: material2MaterialBrand1.unit,
                batchSourceType: BatchSourceType.PURCHASE, manufacturer: manufacturerHONGKONG,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", country: Country.HONGKONG, site: site1).save(failOnError: true, flush: true)
        material2MaterialBrand2Batch1 = new Batch(name: "material2MaterialBrand2Batch1", item: material2MaterialBrand2, title: material2MaterialBrand1.title, spec: material2MaterialBrand1.spec, unit: material2MaterialBrand1.unit,
                batchSourceType: BatchSourceType.PURCHASE, manufacturer: manufacturerHONGKONG,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", country: Country.HONGKONG, site: site1).save(failOnError: true, flush: true)
        material3MaterialBrand1Batch1 = new Batch(name: "material3MaterialBrand1Batch1", item: material3MaterialBrand1, title: material3MaterialBrand1.title, spec: material3MaterialBrand1.spec, unit: material3MaterialBrand1.unit,
                batchSourceType: BatchSourceType.PURCHASE, manufacturer: manufacturerMEXICO,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", country: Country.MEXICO, site: site1).save(failOnError: true, flush: true)
        material4MaterialBrand1Batch1 = new Batch(name: "material4MaterialBrand1Batch1", item: material4MaterialBrand1, title: material4MaterialBrand1.title, spec: material4MaterialBrand1.spec, unit: material4MaterialBrand1.unit,
                batchSourceType: BatchSourceType.PURCHASE, manufacturer: manufacturerTAIWAN,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", country: Country.TAIWAN, site: site1).save(failOnError: true, flush: true)

        material5MaterialBrand2Batch1 = new Batch(name: "material5MaterialBrand2Batch1", item: material5MaterialBrand2, title: material5MaterialBrand2.title, spec: material5MaterialBrand2.spec, unit: material5MaterialBrand2.unit,
                batchSourceType: BatchSourceType.PURCHASE, manufacturer: manufacturerITALY,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", country: Country.ITALY, site: site1).save(failOnError: true, flush: true)
        material6MaterialBrand2Batch1 = new Batch(name: "material6MaterialBrand2Batch1", item: material6MaterialBrand2, title: material6MaterialBrand2.title, spec: material6MaterialBrand2.spec, unit: material6MaterialBrand2.unit,
                batchSourceType: BatchSourceType.PURCHASE, manufacturer: manufacturerCHINA,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", country: Country.CHINA, site: site1).save(failOnError: true, flush: true)
        material7MaterialBrand2Batch1 = new Batch(name: "material7MaterialBrand2Batch1", item: material7MaterialBrand2, title: material7MaterialBrand2.title, spec: material7MaterialBrand2.spec, unit: material7MaterialBrand2.unit,
                batchSourceType: BatchSourceType.PURCHASE, manufacturer: manufacturerUNITEDKINGDOM,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", country: Country.UNITEDKINGDOM, site: site1).save(failOnError: true, flush: true)

        transactionBatch11 = new Batch(name: "transactionBatch11", item: material1MaterialBrand1, title: material1MaterialBrand1.title, spec: material1MaterialBrand1.spec, unit: material1MaterialBrand1.unit,
                batchSourceType: BatchSourceType.PURCHASE, manufacturer: manufacturerHONGKONG,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", country: Country.HONGKONG, site: site1).save(failOnError: true, flush: true)
        transactionBatch21 = new Batch(name: "transactionBatch21", item: material1MaterialBrand1, title: material1MaterialBrand1.title, spec: material1MaterialBrand1.spec, unit: material1MaterialBrand1.unit,
                batchSourceType: BatchSourceType.PURCHASE, manufacturer: manufacturerHONGKONG,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", country: Country.HONGKONG, site: site1).save(failOnError: true, flush: true)
        transactionBatch31 = new Batch(name: "transactionBatch31", item: material1MaterialBrand1, title: material1MaterialBrand1.title, spec: material1MaterialBrand1.spec, unit: material1MaterialBrand1.unit,
                batchSourceType: BatchSourceType.PURCHASE, manufacturer: manufacturerHONGKONG,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", country: Country.HONGKONG, site: site1).save(failOnError: true, flush: true)
        transactionBatch41 = new Batch(name: "transactionBatch41", item: material1MaterialBrand1, title: material1MaterialBrand1.title, spec: material1MaterialBrand1.spec, unit: material1MaterialBrand1.unit,
                batchSourceType: BatchSourceType.PURCHASE, manufacturer: manufacturerHONGKONG,
                dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗", country: Country.HONGKONG, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            
            (1..50).each {
                def loopmanufactureOrder = ManufactureOrder.findByTypeNameAndNameAndSite(looptypenameMANUFACTUREORDER1, "${it}", loopsite1)
                // loopbatch_${it}
                def loopbatch = new Batch(name: loopmanufactureOrder.batchName, item: Item.findByNameAndSite("loopitem_${it}", loopsite1), title: loopitem1.title, spec: loopitem1.spec, unit: loopitem1.unit,
                        batchSourceType: BatchSourceType.MANUFACTURE, manufactureOrder: loopmanufactureOrder,
                        dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗${it}", expectQty: 1000000, country: Country.TAIWAN, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopbatch1 = loopbatch)
                it != 2 ?: (loopbatch2 = loopbatch)
            }
            (51..100).each {
                def loopmanufactureOrder = ManufactureOrder.findByTypeNameAndNameAndSite(looptypenameOUTSRCMANUFACTUREORDER1, "${it}", loopsite1)
                // loopbatch_${it}
                def loopbatch = new Batch(name: loopmanufactureOrder.batchName, item: Item.findByNameAndSite("loopitem_${it}", loopsite1), title: loopitem1.title, spec: loopitem1.spec, unit: loopitem1.unit,
                        batchSourceType: BatchSourceType.OUTSRCMANUFACTURE, manufacturer: loopmanufacturer1, manufactureOrder: loopmanufactureOrder, 
                        dueDate: new Date(), manufactureDate: new Date(), expirationDate: new Date(), remark: "тѓЎУе╗${it}", expectQty: 1000000, country: Country.TAIWAN, site: loopsite1).save(failOnError: true, flush: true)
                it != 51 ?: (loopbatch51 = loopbatch)
                it != 52 ?: (loopbatch52 = loopbatch)
            }
        }
    }

    def createItemRoute = { createLoopData ->

        product1ProductBrand1ItemRoute1 = new ItemRoute(item: product1ProductBrand1, sequence: 1, operation: operation1, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1.addToItemRoutes(product1ProductBrand1ItemRoute1).save(failOnError: true, flush: true)
        product1ProductBrand1ItemRoute2 = new ItemRoute(item: product1ProductBrand1, sequence: 2, operation: operation2, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1.addToItemRoutes(product1ProductBrand1ItemRoute2).save(failOnError: true, flush: true)
        product1ProductBrand1ItemRoute3 = new ItemRoute(item: product1ProductBrand1, sequence: 3, operation: operationInspect, supplier: supplierInspect, site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1.addToItemRoutes(product1ProductBrand1ItemRoute3).save(failOnError: true, flush: true)

        semiProduct1ProductBrand1ItemRoute1 = new ItemRoute(item: semiProduct1ProductBrand1, sequence: 1, operation: operation1, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        semiProduct1ProductBrand1.addToItemRoutes(semiProduct1ProductBrand1ItemRoute1).save(failOnError: true, flush: true)
        semiProduct1ProductBrand1ItemRoute2 = new ItemRoute(item: semiProduct1ProductBrand1, sequence: 2, operation: operation2, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        semiProduct1ProductBrand1.addToItemRoutes(semiProduct1ProductBrand1ItemRoute2).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..50).each {
                def loopitemroute = new ItemRoute(item: loopitem1, sequence: it, operation: loopoperation1, workstation: loopworkstation1, site: loopsite1).save(failOnError: true, flush: true)
                loopitem1.addToItemRoutes(loopitemroute).save(failOnError: true, flush: true)
            }
            (51..100).each {
                def loopitemroute = new ItemRoute(item: loopitem1, sequence: it, operation: loopoperation1, supplier: loopsupplier1, site: loopsite1).save(failOnError: true, flush: true)
                loopitem1.addToItemRoutes(loopitemroute).save(failOnError: true, flush: true)
            }
        }
    }

    def createBatchOperation = { createLoopData ->

        product1ProductBrand1Batch1Operation1 = new BatchOperation(batch: product1ProductBrand1Batch1, sequence: 1,operation: operation1, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1Batch1.addToBatchOperations(product1ProductBrand1Batch1Operation1).save(failOnError: true, flush: true)
        product1ProductBrand1Batch1Operation2 = new BatchOperation(batch: product1ProductBrand1Batch1, sequence: 2,operation: operation2, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1Batch1.addToBatchOperations(product1ProductBrand1Batch1Operation2).save(failOnError: true, flush: true)
        product1ProductBrand1Batch1Operation3 = new BatchOperation(batch: product1ProductBrand1Batch1, sequence: 3,operation: operation3, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1Batch1.addToBatchOperations(product1ProductBrand1Batch1Operation3).save(failOnError: true, flush: true)
        product1ProductBrand1Batch1Operation4 = new BatchOperation(batch: product1ProductBrand1Batch1, sequence: 4,operation: operation4, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1Batch1.addToBatchOperations(product1ProductBrand1Batch1Operation4).save(failOnError: true, flush: true)
        product1ProductBrand1Batch1Operation5 = new BatchOperation(batch: product1ProductBrand1Batch1, sequence: 5,operation: operationInspect, supplier: supplierInspect, remark: "test remark", site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1Batch1.addToBatchOperations(product1ProductBrand1Batch1Operation5).save(failOnError: true, flush: true)

        semiProduct1ProductBrand1Batch1Operation1 = new BatchOperation(batch: semiProduct1ProductBrand1Batch1, sequence: 1, operation: operation1, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        semiProduct1ProductBrand1Batch1.addToBatchOperations(semiProduct1ProductBrand1Batch1Operation1).save(failOnError: true, flush: true)
        semiProduct1ProductBrand1Batch1Operation2 = new BatchOperation(batch: semiProduct1ProductBrand1Batch1, sequence: 2, operation: operation2, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        semiProduct1ProductBrand1Batch1.addToBatchOperations(semiProduct1ProductBrand1Batch1Operation2).save(failOnError: true, flush: true)

        
        product1ProductBrand1Batch3Operation1 = new BatchOperation(batch: product1ProductBrand1Batch3, sequence: 1,operation: operation1, workstation: workstation11, startDate: new Date(), endDate: (new Date()).next(), site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1Batch3.addToBatchOperations(product1ProductBrand1Batch3Operation1).save(failOnError: true, flush: true)
        product1ProductBrand1Batch3Operation2 = new BatchOperation(batch: product1ProductBrand1Batch3, sequence: 2,operation: operation2, workstation: workstation11, startDate: product1ProductBrand1Batch3Operation1.endDate, endDate: product1ProductBrand1Batch3Operation1.endDate.next(), site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1Batch3.addToBatchOperations(product1ProductBrand1Batch3Operation2).save(failOnError: true, flush: true)
        product1ProductBrand1Batch3Operation3 = new BatchOperation(batch: product1ProductBrand1Batch3, sequence: 3,operation: operation3, workstation: workstation11, startDate: product1ProductBrand1Batch3Operation2.endDate, endDate: product1ProductBrand1Batch3Operation2.endDate.next(), site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1Batch3.addToBatchOperations(product1ProductBrand1Batch3Operation3).save(failOnError: true, flush: true)
        product1ProductBrand1Batch3Operation4 = new BatchOperation(batch: product1ProductBrand1Batch3, sequence: 4,operation: operation4, workstation: workstation11, startDate: product1ProductBrand1Batch3Operation3.endDate, endDate: product1ProductBrand1Batch3Operation3.endDate.next(), site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1Batch3.addToBatchOperations(product1ProductBrand1Batch3Operation4).save(failOnError: true, flush: true)
        product1ProductBrand1Batch3Operation5 = new BatchOperation(batch: product1ProductBrand1Batch3, sequence: 5,operation: operationInspect, supplier: supplierInspect, startDate: product1ProductBrand1Batch3Operation4.endDate, endDate: product1ProductBrand1Batch3Operation4.endDate.next(), site: site1).save(failOnError: true, flush: true)
        product1ProductBrand1Batch3.addToBatchOperations(product1ProductBrand1Batch3Operation5).save(failOnError: true, flush: true)
 
        semiProduct1ProductBrand1Batch2Operation1 = new BatchOperation(batch: semiProduct1ProductBrand1Batch2, sequence: 1, operation: operation1, supplier: supplierInspect, site: site1).save(failOnError: true, flush: true)
        semiProduct1ProductBrand1Batch2.addToBatchOperations(semiProduct1ProductBrand1Batch2Operation1).save(failOnError: true, flush: true)
        semiProduct1ProductBrand1Batch2Operation2 = new BatchOperation(batch: semiProduct1ProductBrand1Batch2, sequence: 2, operation: operation2, supplier: supplierInspect, site: site1).save(failOnError: true, flush: true)
        semiProduct1ProductBrand1Batch2.addToBatchOperations(semiProduct1ProductBrand1Batch2Operation2).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..50).each {
                def loopbatchoperation = new BatchOperation(batch: loopbatch1, sequence: it, operation: loopoperation1, workstation: loopworkstation1, site: loopsite1).save(failOnError: true, flush: true)
                loopbatch1.addToBatchOperations(loopbatchoperation).save(failOnError: true, flush: true)
                
                it != 1 ?: (loopbatchoperation1 = loopbatchoperation)
            }
            (51..100).each {
                def loopbatchoperation = new BatchOperation(batch: loopbatch1, sequence: it, operation: loopoperation1, supplier: loopsupplier1, site: loopsite1).save(failOnError: true, flush: true)
                loopbatch1.addToBatchOperations(loopbatchoperation).save(failOnError: true, flush: true)
            }
        }
    }

    def createInventory = { createLoopData ->
        //жаѕт░Їт║ФтГўу┤░жаЁт╗║уй«
        inventory1 = new Inventory(item: material1MaterialBrand1, warehouse: materialWarehouse11, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventory2 = new Inventory(item: material2MaterialBrand1, warehouse: materialWarehouse11, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventory3 = new Inventory(item: material3MaterialBrand1, warehouse: materialWarehouse11, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventory4 = new Inventory(item: material4MaterialBrand1, warehouse: materialWarehouse11, qty: 0, site: site1).save(failOnError: true, flush: true)

        inventory5 = new Inventory(item: material5MaterialBrand2, warehouse: materialWarehouse11, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventory6 = new Inventory(item: material6MaterialBrand2, warehouse: materialWarehouse11, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventory7 = new Inventory(item: material7MaterialBrand2, warehouse: materialWarehouse11, qty: 0, site: site1).save(failOnError: true, flush: true)

        inventory8 = new Inventory(item: product1ProductBrand1, warehouse: productWarehouse11, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventory9 = new Inventory(item: semiProduct1ProductBrand1, warehouse: productWarehouse11, qty: 0, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopinventory = new Inventory(item: Item.findByNameAndBrandAndSite("loopitem_${it}", loopbrand1, loopsite1), warehouse: loopwarehouse1, qty: 0, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopinventory1 = loopinventory)
            }
        }
    }

    def createInventoryDetail = { createLoopData ->

        // жаѕт░ЇуЁДжђ▓У▓етќ«сђЂућЪућбтЁЦт║Фтќ«сђЂУеЌтцќжђ▓У▓етќ«т╗║уй«
        inventoryDetail11 = new InventoryDetail(item: material1MaterialBrand1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, batch: material1MaterialBrand1Batch1, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventoryDetail21 = new InventoryDetail(item: material2MaterialBrand1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, batch: material2MaterialBrand1Batch1, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventoryDetail31 = new InventoryDetail(item: material3MaterialBrand1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, batch: material3MaterialBrand1Batch1, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventoryDetail41 = new InventoryDetail(item: material4MaterialBrand1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, batch: material4MaterialBrand1Batch1, qty: 0, site: site1).save(failOnError: true, flush: true)

        inventoryDetail51 = new InventoryDetail(item: material5MaterialBrand2, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation112, batch: material5MaterialBrand2Batch1, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventoryDetail61 = new InventoryDetail(item: material6MaterialBrand2, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation112, batch: material6MaterialBrand2Batch1, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventoryDetail71 = new InventoryDetail(item: material7MaterialBrand2, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation112, batch: material7MaterialBrand2Batch1, qty: 0, site: site1).save(failOnError: true, flush: true)

        inventoryDetail81 = new InventoryDetail(item: product1ProductBrand1, warehouse: productWarehouse11, warehouseLocation: productWarehouseLocation111, batch: product1ProductBrand1Batch1, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventoryDetail91 = new InventoryDetail(item: semiProduct1ProductBrand1, warehouse: productWarehouse11, warehouseLocation: productWarehouseLocation111, batch: semiProduct1ProductBrand1Batch1, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventoryDetail101 = new InventoryDetail(item: semiProduct1ProductBrand1, warehouse: productWarehouse11, warehouseLocation: productWarehouseLocation112, batch: semiProduct1ProductBrand1Batch2, qty: 0, site: site1).save(failOnError: true, flush: true)

        // for inventoryTransactionSheetDet
        inventoryDetail501 = new InventoryDetail(item: transactionBatch11.item, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, batch: transactionBatch11, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventoryDetail502 = new InventoryDetail(item: transactionBatch21.item, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, batch: transactionBatch21, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventoryDetail503 = new InventoryDetail(item: transactionBatch31.item, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, batch: transactionBatch31, qty: 0, site: site1).save(failOnError: true, flush: true)
        inventoryDetail504 = new InventoryDetail(item: transactionBatch41.item, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, batch: transactionBatch41, qty: 0, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopbatch = Batch.findByNameAndSite("loopbatch_${it}", loopsite1)
                def loopinventorydetail = new InventoryDetail(item: loopbatch.item, warehouse: loopwarehouse1, warehouseLocation: loopwarehouselocation1, batch: loopbatch, qty: 0, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopinventorydetail1 = loopinventorydetail)
            }
        }
    }

    def createInventoryTransactionSheet = { createLoopData ->

        // тЁЦт║ФуЋ░тІЋтќ«ТЊџ
        inventoryTransactionSheet1 = new InventoryTransactionSheet(typeName: typeNameTransactionSTORAGE, name: dateService.getUserStrDate("yyyyMMdd", "GMT+0800")+"001", factory: factory1, site: site1).save(failOnError: true, flush: true)
        // тЄ║т║ФуЋ░тІЋтќ«ТЊџ
        inventoryTransactionSheet2 = new InventoryTransactionSheet(typeName: typeNameReturnTransactionSTORAGE, name: dateService.getUserStrDate("yyyyMMdd", "GMT+0800")+"001", factory: factory1, site: site1).save(failOnError: true, flush: true)
        // жіиУ▓еуЋ░тІЋтќ«ТЊџ
        inventoryTransactionSheet3 = new InventoryTransactionSheet(typeName: typeNameTransactionSALE, name: dateService.getUserStrDate("yyyyMMdd", "GMT+0800")+"001", factory: factory1, site: site1).save(failOnError: true, flush: true)
        // жаўућеуЋ░тІЋтќ«ТЊџ
        inventoryTransactionSheet4 = new InventoryTransactionSheet(typeName: typeNameTransactionREQUISITION, name: dateService.getUserStrDate("yyyyMMdd", "GMT+0800")+"001", factory: factory1, site: site1).save(failOnError: true, flush: true)
        // Уф┐ТЋ┤уЋ░тІЋтќ«ТЊџ
        // inventoryTransactionSheet5 = new InventoryTransactionSheet(typeName: typeNameTransactionADJUSTMENT, name: dateService.getUserStrDate("yyyyMMdd", "GMT+0800")+"001", factory: factory1, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopinventorytransactionsheet = new InventoryTransactionSheet(typeName: looptypenameTRANSACTION1, name: dateService.getUserStrDate("yyyyMMdd", "GMT+0800")+"00${it}", factory: loopfactory1, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopinventorytransactionsheet1 = loopinventorytransactionsheet)
            }
        }

    }

     def createInventoryTransactionSheetDet = { createLoopData ->
        inventoryTransactionSheetDet11 = new InventoryTransactionSheetDet(typeName: inventoryTransactionSheet1.typeName, name: inventoryTransactionSheet1.name, sequence: 1, header: inventoryTransactionSheet1,
            batch: transactionBatch11, item: transactionBatch11.item, outWarehouse: materialWarehouse11, outWarehouseLocation: materialWarehouseLocation111, qty: 1000, unit: transactionBatch11.item.unit, site: site1).save(failOnError: true, flush: true)
        inventoryTransactionSheetDet21 = new InventoryTransactionSheetDet(typeName: inventoryTransactionSheet2.typeName, name: inventoryTransactionSheet2.name, sequence: 1, header: inventoryTransactionSheet2,
            batch: transactionBatch21, item: transactionBatch21.item, outWarehouse: materialWarehouse11, outWarehouseLocation: materialWarehouseLocation111, qty: 500, unit: transactionBatch21.item.unit, site: site1).save(failOnError: true, flush: true)
        inventoryTransactionSheetDet31 = new InventoryTransactionSheetDet(typeName: inventoryTransactionSheet3.typeName, name: inventoryTransactionSheet3.name, sequence: 1, header: inventoryTransactionSheet3,
            batch: transactionBatch31, item: transactionBatch31.item, outWarehouse: materialWarehouse11, outWarehouseLocation: materialWarehouseLocation111, qty: 1500, unit: transactionBatch31.item.unit, site: site1).save(failOnError: true, flush: true)
        inventoryTransactionSheetDet41 = new InventoryTransactionSheetDet(typeName: inventoryTransactionSheet4.typeName, name: inventoryTransactionSheet4.name, sequence: 1, header: inventoryTransactionSheet4,
            batch: transactionBatch41, item: transactionBatch41.item, outWarehouse: materialWarehouse11, outWarehouseLocation: materialWarehouseLocation111, qty: 600, unit: transactionBatch41.item.unit, site: site1).save(failOnError: true, flush: true)

        processInventoryQtyAndTransactionRecord(inventoryTransactionSheetDet11)
        processInventoryQtyAndTransactionRecord(inventoryTransactionSheetDet21)
        processInventoryQtyAndTransactionRecord(inventoryTransactionSheetDet31)
        processInventoryQtyAndTransactionRecord(inventoryTransactionSheetDet41)

         if (createLoopData) {
            (1..100).each {
                def loopinventorytransactionsheetdet = new InventoryTransactionSheetDet(typeName: loopinventorytransactionsheet1.typeName, name: loopinventorytransactionsheet1.name, sequence: it, header: loopinventorytransactionsheet1,
                    batch: loopbatch2, item: loopbatch2.item, outWarehouse: loopwarehouse1, outWarehouseLocation: loopwarehouselocation1, qty: 100, unit: loopbatch2.item.unit, site: loopsite1).save(failOnError: true, flush: true)
                
                processInventoryQtyAndTransactionRecord(loopinventorytransactionsheetdet)

                it != 1 ?: (loopinventorytransactionsheetdet1 = loopinventorytransactionsheetdet)
            }
        }
    }

    def createPurchaseSheet = { createLoopData ->

        purchaseSheet1 = new PurchaseSheet(typeName: typeNamePurchaseSheet, name: "001", factory: factory1, supplier: supplier1, site: site1).save(failOnError: true, flush: true)
        purchaseSheet2 = new PurchaseSheet(typeName: typeNamePurchaseSheet, name: "002", factory: factory1, supplier: supplier2, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            looptypenamePURCHASESHEET1 = TypeName.findByNameAndSite("looptypename_PurchaseSheet", loopsite1)

            (1..100).each {
                def looppurchasesheet = new PurchaseSheet(typeName: looptypenamePURCHASESHEET1, name: "${it}", factory: loopfactory1, supplier: loopsupplier1, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (looppurchasesheet1 = looppurchasesheet)
            }
        }
    }
    def createPurchaseSheetDet = { createLoopData ->
        //жђ▓У▓етќ«
        purchaseSheetDet11 = new PurchaseSheetDet(header: purchaseSheet1, typeName: purchaseSheet1.typeName, name: purchaseSheet1.name, sequence: 1, item: material1MaterialBrand1, unit: material1MaterialBrand1.unit, batch: material1MaterialBrand1Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, qty: 5000, price: 20, site: site1).save(failOnError: true, flush: true)
        purchaseSheetDet12 = new PurchaseSheetDet(header: purchaseSheet1, typeName: purchaseSheet1.typeName, name: purchaseSheet1.name, sequence: 2, item: material2MaterialBrand1, unit: material2MaterialBrand1.unit, batch: material2MaterialBrand1Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, qty: 10000, price: 10, site: site1).save(failOnError: true, flush: true)
        purchaseSheetDet13 = new PurchaseSheetDet(header: purchaseSheet1, typeName: purchaseSheet1.typeName, name: purchaseSheet1.name, sequence: 3, item: material3MaterialBrand1, unit: material3MaterialBrand1.unit, batch: material3MaterialBrand1Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, qty: 15000, price: 2, site: site1).save(failOnError: true, flush: true)
        purchaseSheetDet14 = new PurchaseSheetDet(header: purchaseSheet1, typeName: purchaseSheet1.typeName, name: purchaseSheet1.name, sequence: 4, item: material4MaterialBrand1, unit: material4MaterialBrand1.unit, batch: material4MaterialBrand1Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, qty: 20000, price: 1, site: site1).save(failOnError: true, flush: true)

        purchaseSheetDet21 = new PurchaseSheetDet(header: purchaseSheet2, typeName: purchaseSheet2.typeName, name: purchaseSheet2.name, sequence: 1, item: material5MaterialBrand2, unit: material5MaterialBrand2.unit, batch: material5MaterialBrand2Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation112, qty: 5000, price: 100, site: site1).save(failOnError: true, flush: true)
        purchaseSheetDet22 = new PurchaseSheetDet(header: purchaseSheet2, typeName: purchaseSheet2.typeName, name: purchaseSheet2.name, sequence: 2, item: material6MaterialBrand2, unit: material6MaterialBrand2.unit, batch: material6MaterialBrand2Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation112, qty: 10000, price: 10, site: site1).save(failOnError: true, flush: true)
        purchaseSheetDet23 = new PurchaseSheetDet(header: purchaseSheet2, typeName: purchaseSheet2.typeName, name: purchaseSheet2.name, sequence: 3, item: material7MaterialBrand2, unit: material7MaterialBrand2.unit, batch: material7MaterialBrand2Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation112, qty: 15000, price: 200, site: site1).save(failOnError: true, flush: true)

        processInventoryQtyAndTransactionRecord(purchaseSheetDet11)
        processInventoryQtyAndTransactionRecord(purchaseSheetDet12)
        processInventoryQtyAndTransactionRecord(purchaseSheetDet13)
        processInventoryQtyAndTransactionRecord(purchaseSheetDet14)

        processInventoryQtyAndTransactionRecord(purchaseSheetDet21)
        processInventoryQtyAndTransactionRecord(purchaseSheetDet22)
        processInventoryQtyAndTransactionRecord(purchaseSheetDet23)

        processSheetPrice(purchaseSheetDet11)
        processSheetPrice(purchaseSheetDet12)
        processSheetPrice(purchaseSheetDet13)
        processSheetPrice(purchaseSheetDet14)

        processSheetPrice(purchaseSheetDet21)
        processSheetPrice(purchaseSheetDet22)
        processSheetPrice(purchaseSheetDet23)

        if (createLoopData) {
            (1..100).each {
                def looppurchasesheetdet = new PurchaseSheetDet(header: looppurchasesheet1, typeName: looppurchasesheet1.typeName, name: looppurchasesheet1.name, sequence: it, item: loopbatch52.item, unit: loopbatch52.item.unit, batch: loopbatch52, warehouse: loopwarehouse1, warehouseLocation: loopwarehouselocation1, qty: 2000, price: 100, site: loopsite1).save(failOnError: true, flush: true)
                processInventoryQtyAndTransactionRecord(looppurchasesheetdet)

                it != 1 ?: (looppurchasesheetdet1 = looppurchasesheetdet)
            }
        }
    }

    def createMaterialSheet = { createLoopData ->

        //тЇіТѕљтЊЂжаўТќЎтќ«
        materialSheet1 = new MaterialSheet(typeName: typeNameMaterialSheet, name: "001", factory: workstation11.factory, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        //ТѕљтЊЂжаўТќЎтќ«
        materialSheet2 = new MaterialSheet(typeName: typeNameMaterialSheet, name: "002", factory: workstation11.factory, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        //тЇіТѕљтЊЂУеЌтцќжаўТќЎтќ«
        materialSheet3 = new MaterialSheet(typeName: typeNameOutSrcMaterialSheet, name: "003", factory: factory1, supplier: supplierInspect, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {

            (1..50).each {
                def loopmaterialsheet = new MaterialSheet(typeName: looptypenameMATERIALSHEET1, name: "${it}", factory: loopfactory1, workstation: loopworkstation1, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopmaterialsheet1 = loopmaterialsheet)
            }
            (51..100).each {
                new MaterialSheet(typeName: looptypenameOUTSRCMATERIALSHEET1, name: "${it}", factory: loopfactory1, supplier: loopsupplier1, site: loopsite1).save(failOnError: true, flush: true)
            }
        }
    }

    def createMaterialSheetDet = { createLoopData ->
        materialSheetDet11 = new MaterialSheetDet(header: materialSheet1, typeName: materialSheet1.typeName, name: materialSheet1.name, sequence: 1, item: material5MaterialBrand2, unit: material5MaterialBrand2.unit, batch: material5MaterialBrand2Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation112, qty: 1000, manufactureOrder: manufactureOrder1, batchOperation: Batch.findByNameAndSite(manufactureOrder1.batchName, site1).batchOperations[0], releaseOrder: 1, site: site1).save(failOnError: true, flush: true)
        materialSheetDet12 = new MaterialSheetDet(header: materialSheet1, typeName: materialSheet1.typeName, name: materialSheet1.name, sequence: 2, item: material6MaterialBrand2, unit: material6MaterialBrand2.unit, batch: material6MaterialBrand2Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation112, qty: 2000, manufactureOrder: manufactureOrder1, batchOperation: Batch.findByNameAndSite(manufactureOrder1.batchName, site1).batchOperations[0], releaseOrder: 1, site: site1).save(failOnError: true, flush: true)
        materialSheetDet13 = new MaterialSheetDet(header: materialSheet1, typeName: materialSheet1.typeName, name: materialSheet1.name, sequence: 3, item: material7MaterialBrand2, unit: material7MaterialBrand2.unit, batch: material7MaterialBrand2Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation112, qty: 3000, manufactureOrder: manufactureOrder1, batchOperation: Batch.findByNameAndSite(manufactureOrder1.batchName, site1).batchOperations[0], releaseOrder: 1, site: site1).save(failOnError: true, flush: true)
        manufactureOrder1.status = ManufactureOrderStatus.DISBURSED
        manufactureOrder1.save(failOnError: true, flush: true)

        //ТѕљтЊЂжаўТќЎтќ«
        materialSheetDet21 = new MaterialSheetDet(header: materialSheet2, typeName: materialSheet2.typeName, name: materialSheet2.name, sequence: 1, item: material1MaterialBrand1, unit: material1MaterialBrand1.unit, batch: material1MaterialBrand1Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, qty: 1000, manufactureOrder: manufactureOrder2, batchOperation: Batch.findByNameAndSite(manufactureOrder2.batchName, site1).batchOperations[0], releaseOrder: 1, site: site1).save(failOnError: true, flush: true)
        materialSheetDet22 = new MaterialSheetDet(header: materialSheet2, typeName: materialSheet2.typeName, name: materialSheet2.name, sequence: 2, item: material2MaterialBrand1, unit: material2MaterialBrand1.unit, batch: material2MaterialBrand1Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, qty: 2000, manufactureOrder: manufactureOrder2, batchOperation: Batch.findByNameAndSite(manufactureOrder2.batchName, site1).batchOperations[0], releaseOrder: 1, site: site1).save(failOnError: true, flush: true)
        materialSheetDet23 = new MaterialSheetDet(header: materialSheet2, typeName: materialSheet2.typeName, name: materialSheet2.name, sequence: 3, item: material3MaterialBrand1, unit: material3MaterialBrand1.unit, batch: material3MaterialBrand1Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, qty: 3000, manufactureOrder: manufactureOrder2, batchOperation: Batch.findByNameAndSite(manufactureOrder2.batchName, site1).batchOperations[0], releaseOrder: 1, site: site1).save(failOnError: true, flush: true)
        materialSheetDet24 = new MaterialSheetDet(header: materialSheet2, typeName: materialSheet2.typeName, name: materialSheet2.name, sequence: 4, item: material4MaterialBrand1, unit: material4MaterialBrand1.unit, batch: material4MaterialBrand1Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation111, qty: 4000, manufactureOrder: manufactureOrder2, batchOperation: Batch.findByNameAndSite(manufactureOrder2.batchName, site1).batchOperations[0], releaseOrder: 1, site: site1).save(failOnError: true, flush: true)
        materialSheetDet25 = new MaterialSheetDet(header: materialSheet2, typeName: materialSheet2.typeName, name: materialSheet2.name, sequence: 5, item: semiProduct1ProductBrand1, unit: semiProduct1ProductBrand1.unit, batch: semiProduct1ProductBrand1Batch1, warehouse: productWarehouse11, warehouseLocation: productWarehouseLocation111, qty: 500, manufactureOrder: manufactureOrder2, batchOperation: Batch.findByNameAndSite(manufactureOrder2.batchName, site1).batchOperations[0], releaseOrder: 1, site: site1).save(failOnError: true, flush: true)
        manufactureOrder2.status = ManufactureOrderStatus.DISBURSED
        manufactureOrder2.save(failOnError: true, flush: true)

        //тЇіТѕљтЊЂУеЌтцќжаўТќЎтќ«
        materialSheetDet31 = new MaterialSheetDet(header: materialSheet3, typeName: materialSheet3.typeName, name: materialSheet3.name, sequence: 1, item: material5MaterialBrand2, unit: material5MaterialBrand2.unit, batch: material5MaterialBrand2Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation112, qty: 500, manufactureOrder: manufactureOrder3, batchOperation: Batch.findByNameAndSite(manufactureOrder3.batchName, site1).batchOperations[0], releaseOrder: 1, site: site1).save(failOnError: true, flush: true)
        materialSheetDet32 = new MaterialSheetDet(header: materialSheet3, typeName: materialSheet3.typeName, name: materialSheet3.name, sequence: 2, item: material6MaterialBrand2, unit: material6MaterialBrand2.unit, batch: material6MaterialBrand2Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation112, qty: 500, manufactureOrder: manufactureOrder3, batchOperation: Batch.findByNameAndSite(manufactureOrder3.batchName, site1).batchOperations[0], releaseOrder: 1, site: site1).save(failOnError: true, flush: true)
        materialSheetDet33 = new MaterialSheetDet(header: materialSheet3, typeName: materialSheet3.typeName, name: materialSheet3.name, sequence: 3, item: material7MaterialBrand2, unit: material7MaterialBrand2.unit, batch: material7MaterialBrand2Batch1, warehouse: materialWarehouse11, warehouseLocation: materialWarehouseLocation112, qty: 500, manufactureOrder: manufactureOrder3, batchOperation: Batch.findByNameAndSite(manufactureOrder3.batchName, site1).batchOperations[0], releaseOrder: 1, site: site1).save(failOnError: true, flush: true)
        manufactureOrder1.status = ManufactureOrderStatus.DISBURSED
        manufactureOrder1.save(failOnError: true, flush: true)
        
        processInventoryQtyAndTransactionRecord(materialSheetDet11)
        processInventoryQtyAndTransactionRecord(materialSheetDet12)
        processInventoryQtyAndTransactionRecord(materialSheetDet13)

        processInventoryQtyAndTransactionRecord(materialSheetDet21)
        processInventoryQtyAndTransactionRecord(materialSheetDet22)
        processInventoryQtyAndTransactionRecord(materialSheetDet23)
        processInventoryQtyAndTransactionRecord(materialSheetDet24)
        processInventoryQtyAndTransactionRecord(materialSheetDet25)

        processInventoryQtyAndTransactionRecord(materialSheetDet31)
        processInventoryQtyAndTransactionRecord(materialSheetDet32)
        processInventoryQtyAndTransactionRecord(materialSheetDet33)

        if (createLoopData) {
            (1..100).each {
                def loopmaterialsheetdet = new MaterialSheetDet(header: loopmaterialsheet1, typeName: loopmaterialsheet1.typeName, name: loopmaterialsheet1.name, sequence: it, item: loopbatch52.item, unit: loopbatch52.item.unit, batch: loopbatch52, warehouse: loopwarehouse1, warehouseLocation: loopwarehouselocation1, qty: 100, manufactureOrder: loopmanufactureorder1, batchOperation: Batch.findByNameAndSite(loopmanufactureorder1.batchName, loopsite1).batchOperations[0], releaseOrder: 1, site: loopsite1).save(failOnError: true, flush: true)
                processInventoryQtyAndTransactionRecord(loopmaterialsheetdet)

                it != 1 ?: (loopmaterialsheetdet1 = loopmaterialsheetdet)
            }
        }
    }

    def createMaterialSheetDetCustomize = { createLoopData ->

        //ТЅђТюЅжаўТќЎтќ«тќ«У║ФТИгУЕд
        materialSheetDetCustomize1 = new MaterialSheetDetCustomize(title: "жаўТќЎтќ«-тИЃТъЌтЈЃТЋИ", fieldType: FieldType.BOOLEAN, defaultValue: "true", unit: null, site: site1).save(failOnError: true, flush: true)
        //тЊЂжаЁТИгУЕд::тјЪТќЎ5тЊЂуЅї2-уЌЁУЪ▓УЇЅт«│-уёА
        material5MaterialSheetDetCustomize1 = new MaterialSheetDetCustomize(item: material5MaterialBrand2, title: "тјЪТќЎ5тЊЂуЅї2-уЌЁУЪ▓УЇЅт«│-уёА-ТЋИтГЌтЈЃТЋИ", fieldType: FieldType.DOUBLE, defaultValue: "55.22", unit: null, site: site1).save(failOnError: true, flush: true)
        //тЊЂжаЁжАътѕЦСИђТИгУЕд::уЌЁУЪ▓УЇЅт«│
        itemCategoryLayer12MaterialSheetDetCustomize1 = new MaterialSheetDetCustomize(itemCategoryLayer1: itemCategoryLayer12, title: "жАътѕЦСИђ-уЌЁУЪ▓УЇЅт«│-тГЌСИ▓тЈЃТЋИ", fieldType: FieldType.STRING, defaultValue: null, unit: null, site: site1).save(failOnError: true, flush: true)
        //тЊЂжаЁжАътѕЦС║їТИгУЕд::УЙ▓УЌЦ
        itemCategoryLayer221MaterialSheetDetCustomize1 = new MaterialSheetDetCustomize(itemCategoryLayer1: itemCategoryLayer12, itemCategoryLayer2: itemCategoryLayer221, title: "жАътѕЦС║ї-УЙ▓УЌЦ-ТЋ┤ТЋИтЈЃТЋИ", fieldType: FieldType.INTEGER, defaultValue: "1000", unit: "тђЇ", site: site1).save(failOnError: true, flush: true)
        //тЊЂжаЁ+жАътѕЦСИђ+жАътѕЦС║їТИгУЕд::тјЪТќЎ6тЊЂуЅї2-уЌЁУЪ▓УЇЅт«│-УЙ▓УЌЦ
        material6ItemCategoryLayer12ItemCategoryLayer221MaterialSheetDetCustomize1 = new MaterialSheetDetCustomize(itemCategoryLayer1: itemCategoryLayer12, itemCategoryLayer2: itemCategoryLayer221, item: material6MaterialBrand2, title: "тјЪТќЎ6тЊЂуЅї2-жАътѕЦСИђ-уЌЁУЪ▓УЇЅт«│-жАътѕЦС║ї-УЙ▓УЌЦ-ТЋ┤ТЋИтЈЃТЋИ", fieldType: FieldType.INTEGER, defaultValue: null, unit: null, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..30).each {
                def loopmaterialsheetdetcustomize = new MaterialSheetDetCustomize(item: loopitem1, title: "loop${it}", fieldType: FieldType.INTEGER, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopmaterialsheetdetcustomize1 = loopmaterialsheetdetcustomize)
            }
            (31..60).each {
                new MaterialSheetDetCustomize(itemCategoryLayer1: loopitemcategorylayer11, title: "loop${it}", fieldType: FieldType.DOUBLE, site: loopsite1).save(failOnError: true, flush: true)
            }
            (61..90).each {
                new MaterialSheetDetCustomize(itemCategoryLayer1: loopitemcategorylayer11, itemCategoryLayer2: loopitemcategorylayer211, title: "loop${it}", fieldType: FieldType.INTEGER, site: loopsite1).save(failOnError: true, flush: true)
            }
            (91..100).each {
                new MaterialSheetDetCustomize(title: "loop${it}", fieldType: FieldType.STRING, site: loopsite1).save(failOnError: true, flush: true)
            }
        }
    }

    def createMaterialSheetDetCustomizeDet = { createLoopData ->


        //ТЅђТюЅжаўТќЎтќ«тЈЃТЋИ
        materialSheetDet31MaterialSheetDetCustomizeDet1 = new MaterialSheetDetCustomizeDet(materialSheetDet: materialSheetDet31, materialSheetDetCustomize: materialSheetDetCustomize1, value: "false", site: site1).save(failOnError: true, flush: true)

        //тЊЂжаЁТИгУЕд::тјЪТќЎ5тЊЂуЅї2-уЌЁУЪ▓УЇЅт«│-уёА
        materialSheetDet31Material5MaterialSheetDetCustomize1 = new MaterialSheetDetCustomizeDet(materialSheetDet: materialSheetDet31, materialSheetDetCustomize: material5MaterialSheetDetCustomize1, value: "20.11", site: site1).save(failOnError: true, flush: true)

        //тЊЂжаЁжАътѕЦСИђТИгУЕд::уЌЁУЪ▓УЇЅт«│
        materialSheetDet31itemCategoryLayer12MaterialSheetDetCustomize1 = new MaterialSheetDetCustomizeDet(materialSheetDet: materialSheetDet31, materialSheetDetCustomize: itemCategoryLayer12MaterialSheetDetCustomize1, value: "т░ЈУџітГљ", site: site1).save(failOnError: true, flush: true)

        //тЊЂжаЁжАътѕЦС║їТИгУЕд::УЙ▓УЌЦ
        materialSheetDet32itemCategoryLayer221MaterialSheetDetCustomize1 = new MaterialSheetDetCustomizeDet(materialSheetDet: materialSheetDet32, materialSheetDetCustomize: itemCategoryLayer221MaterialSheetDetCustomize1, value: "85", site: site1).save(failOnError: true, flush: true)

        //тЊЂжаЁ+жАътѕЦСИђ+жАътѕЦС║їТИгУЕд::тјЪТќЎ6тЊЂуЅї2-уЌЁУЪ▓УЇЅт«│-УЙ▓УЌЦ
        materialSheetDet32material6ItemCategoryLayer12ItemCategoryLayer221MaterialSheetDetCustomize1 = new MaterialSheetDetCustomizeDet(materialSheetDet: materialSheetDet32, materialSheetDetCustomize: material6ItemCategoryLayer12ItemCategoryLayer221MaterialSheetDetCustomize1, value: "31", site: site1).save(failOnError: true, flush: true)

    }

    def createStockInSheet = { createLoopData ->

        stockInSheet1 = new StockInSheet(typeName: typeNameStockInSheet, name: "001", factory: workstation11.factory, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        stockInSheet2 = new StockInSheet(typeName: typeNameStockInSheet, name: "002", factory: workstation11.factory, workstation: workstation11, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopstockinsheet = new StockInSheet(typeName: looptypenameSTOCKINSHEET1, name: "${it}", factory: loopfactory1, workstation: loopworkstation1, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopstockinsheet1 = loopstockinsheet)
            }
        }
    }

    def createStockInSheetDet = { createLoopData ->

        //тЇіТѕљтЊЂтЁЦт║Фтќ«
        stockInSheetDet11 = new StockInSheetDet(header: stockInSheet1, typeName: stockInSheet1.typeName, name: stockInSheet1.name,sequence: 1, item: manufactureOrder1.item, unit: manufactureOrder1.item.unit, batch: semiProduct1ProductBrand1Batch1, warehouse: productWarehouse11, warehouseLocation: productWarehouseLocation111, qty: 500000, manufactureOrder: manufactureOrder1, site: site1).save(failOnError: true, flush: true)

        //ТѕљтЊЂтЁЦт║Фтќ«
        stockInSheetDet21 = new StockInSheetDet(header: stockInSheet2, typeName: stockInSheet2.typeName, name: stockInSheet2.name,sequence: 1, item: manufactureOrder2.item, unit: manufactureOrder2.item.unit, batch: product1ProductBrand1Batch1, warehouse: productWarehouse11, warehouseLocation: productWarehouseLocation111, qty: 1000000,manufactureOrder: manufactureOrder2, site: site1).save(failOnError: true, flush: true)

        processInventoryQtyAndTransactionRecord(stockInSheetDet11)
        processInventoryQtyAndTransactionRecord(stockInSheetDet21)

        if (createLoopData) {
            (1..100).each {
                def loopstockinsheetdet = new StockInSheetDet(header: loopstockinsheet1, typeName: loopstockinsheet1.typeName, name: loopstockinsheet1.name, sequence: it, item: loopmanufactureorder1.item, unit: loopmanufactureorder1.item.unit, batch: loopbatch1, warehouse: loopwarehouse1, warehouseLocation: loopwarehouselocation1, qty: 100000, manufactureOrder: loopmanufactureorder1, site: loopsite1).save(failOnError: true, flush: true)
                processInventoryQtyAndTransactionRecord(loopstockinsheetdet)

                it != 1 ?: (loopstockinsheetdet1 = loopstockinsheetdet)
            }
        }
    }

    def createOutSrcPurchaseSheet = { createLoopData ->

        outSrcPurchaseSheet1 = new OutSrcPurchaseSheet(typeName: typeNameOutSrcPurchaseSheet, name: "001", factory: factory1, supplier: supplierInspect, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopoutsrcpurchasesheet = new OutSrcPurchaseSheet(typeName: looptypenameOUTSRCPURCHASESHEET1, name: "${it}", factory: loopfactory1, supplier: loopsupplier1, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopoutsrcpurchasesheet1 = loopoutsrcpurchasesheet)
            }
        }
    }

    def createOutSrcPurchaseSheetDet = { createLoopData ->

        //тЇіТѕљтЊЂУеЌтцќжђ▓У▓етќ«
        outSrcPurchaseSheetDet11 = new OutSrcPurchaseSheetDet(header: outSrcPurchaseSheet1, typeName: outSrcPurchaseSheet1.typeName, name: outSrcPurchaseSheet1.name, sequence: 1, item: semiProduct1ProductBrand1, unit: semiProduct1ProductBrand1.unit, batch: semiProduct1ProductBrand1Batch2, warehouse: productWarehouse11, warehouseLocation: productWarehouseLocation112, qty: 10000, manufactureOrder: manufactureOrder3, site: site1).save(failOnError: true, flush: true)

        processInventoryQtyAndTransactionRecord(outSrcPurchaseSheetDet11)

        if (createLoopData) {
            (1..100).each {
                def loopoutsrcpurchasesheetdet = new OutSrcPurchaseSheetDet(header: loopoutsrcpurchasesheet1, typeName: loopoutsrcpurchasesheet1.typeName, name: loopoutsrcpurchasesheet1.name, sequence: it, item: loopbatch51.item, unit: loopbatch51.item.unit, batch: loopbatch51, warehouse: loopwarehouse1, warehouseLocation: loopwarehouselocation1, qty: 100000, manufactureOrder: loopmanufactureorder51, site: loopsite1).save(failOnError: true, flush: true)
                processInventoryQtyAndTransactionRecord(loopoutsrcpurchasesheetdet)

                it != 1 ?: (loopoutsrcpurchasesheetdet1 = loopoutsrcpurchasesheetdet)
            }
        }
    }

    def createSaleSheet = { createLoopData ->
        //ТѕљтЊЂжіиУ▓е
        saleSheet1 = new SaleSheet(typeName: typeNameSaleSheet, name: "001", factory: factory1, customer: customer1, site: site1).save(failOnError: true, flush: true)
        //УеЌтцќтЇіТѕљтЊЂжіиУ▓е
        saleSheet2 = new SaleSheet(typeName: typeNameSaleSheet, name: "002", factory: factory1, customer: customer2, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopsalesheet = new SaleSheet(typeName: looptypenameSALESHEET1, name: "${it}", factory: loopfactory1, customer: loopcustomer1, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopsalesheet1 = loopsalesheet)
            }
        }
    }

    def createSaleSheetDet = { createLoopData ->
        
        //ТѕљтЊЂжіиУ▓е
        saleSheetDet11 = new SaleSheetDet(header: saleSheet1, typeName: saleSheet1.typeName, name: saleSheet1.name,sequence: 1, item: product1ProductBrand1, unit: product1ProductBrand1.unit, batch: product1ProductBrand1Batch1, warehouse: productWarehouse11, warehouseLocation: productWarehouseLocation111, qty: 5000, customerOrderDet: customerOrderDet11, site: site1).save(failOnError: true, flush: true)

        //УеЌтцќтЇіТѕљтЊЂжіиУ▓е
        saleSheetDet21 = new SaleSheetDet(header: saleSheet2, typeName: saleSheet2.typeName, name: saleSheet2.name,sequence: 1, item: semiProduct1ProductBrand1, unit: semiProduct1ProductBrand1.unit, batch: semiProduct1ProductBrand1Batch2, warehouse: productWarehouse11, warehouseLocation: productWarehouseLocation112, qty: 1000, site: site1).save(failOnError: true, flush: true)

        processInventoryQtyAndTransactionRecord(saleSheetDet11)
        processInventoryQtyAndTransactionRecord(saleSheetDet21)

        if (createLoopData) {
            (1..100).each {
                def loopsalesheetdet = new SaleSheetDet(header: loopsalesheet1, typeName: loopsalesheet1.typeName, name: loopsalesheet1.name, sequence: it, item: loopbatch1.item, unit: loopbatch1.item.unit, batch: loopbatch1, warehouse: loopwarehouse1, warehouseLocation: loopwarehouselocation1, qty: 1000, customerOrderDet: loopcustomerorderdet1, site: loopsite1).save(failOnError: true, flush: true)
                processInventoryQtyAndTransactionRecord(loopsalesheetdet)

                it != 1 ?: (loopsalesheetdet1 = loopsalesheetdet)
            }
        }
    }

    //************************************жђђтќ«*****************************************

    def createPurchaseReturnSheet = { createLoopData ->
        purchaseReturnSheet1 = new PurchaseReturnSheet(typeName: typeNamePurchaseReturnSheet, name: "001", factory: purchaseSheet1.factory, supplier: purchaseSheet1.supplier, site: site1).save(failOnError: true, flush: true)
        purchaseReturnSheet2 = new PurchaseReturnSheet(typeName: typeNamePurchaseReturnSheet, name: "002", factory: purchaseSheet2.factory, supplier: purchaseSheet2.supplier, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def looppurchasereturnsheet = new PurchaseReturnSheet(typeName: looptypenamePURCHASERETURNSHEET1, name: "${it}", factory: looppurchasesheet1.factory, supplier: looppurchasesheet1.supplier, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (looppurchasereturnsheet1 = looppurchasereturnsheet)
            }
        }
    }
    def createPurchaseReturnSheetDet = { createLoopData ->
        purchaseReturnSheetDet13 = new PurchaseReturnSheetDet(header: purchaseReturnSheet1, typeName: purchaseReturnSheet1.typeName, name: purchaseReturnSheet1.name, sequence: 3, purchaseSheetDet: purchaseSheetDet13, item: purchaseSheetDet13.item, unit: purchaseSheetDet13.item.unit, batch: purchaseSheetDet13.batch, warehouse: purchaseSheetDet13.warehouse, warehouseLocation: purchaseSheetDet13.warehouseLocation, qty: 1000, site: site1).save(failOnError: true, flush: true)
        purchaseReturnSheetDet14 = new PurchaseReturnSheetDet(header: purchaseReturnSheet1, typeName: purchaseReturnSheet1.typeName, name: purchaseReturnSheet1.name, sequence: 4, purchaseSheetDet: purchaseSheetDet14, item: purchaseSheetDet14.item, unit: purchaseSheetDet14.item.unit, batch: purchaseSheetDet14.batch, warehouse: purchaseSheetDet14.warehouse, warehouseLocation: purchaseSheetDet14.warehouseLocation, qty: 1000, site: site1).save(failOnError: true, flush: true)

        purchaseReturnSheetDet23 = new PurchaseReturnSheetDet(header: purchaseReturnSheet2, typeName: purchaseReturnSheet2.typeName, name: purchaseReturnSheet2.name, sequence: 3, purchaseSheetDet: purchaseSheetDet23, item: purchaseSheetDet23.item, unit: purchaseSheetDet23.item.unit, batch: purchaseSheetDet23.batch, warehouse: purchaseSheetDet23.warehouse, warehouseLocation: purchaseSheetDet23.warehouseLocation, qty: 1000, site: site1).save(failOnError: true, flush: true)

        processInventoryQtyAndTransactionRecord(purchaseReturnSheetDet13)
        processInventoryQtyAndTransactionRecord(purchaseReturnSheetDet14)
        processInventoryQtyAndTransactionRecord(purchaseReturnSheetDet23)

        if (createLoopData) {
            (1..100).each {
                def looppurchasereturnsheetdet = new PurchaseReturnSheetDet(header: looppurchasereturnsheet1, typeName: looppurchasereturnsheet1.typeName, name: looppurchasereturnsheet1.name, sequence: it, purchaseSheetDet: looppurchasesheetdet1, item: looppurchasesheetdet1.item, unit: looppurchasesheetdet1.item.unit, batch: looppurchasesheetdet1.batch, warehouse: looppurchasesheetdet1.warehouse, warehouseLocation: looppurchasesheetdet1.warehouseLocation, qty: 1, site: loopsite1).save(failOnError: true, flush: true)
                processInventoryQtyAndTransactionRecord(looppurchasereturnsheetdet)

                it != 1 ?: (looppurchasereturnsheetdet1 = looppurchasereturnsheetdet)
            }
        }
    }

    def createMaterialReturnSheet = { createLoopData ->

        materialReturnSheet1 = new MaterialReturnSheet(typeName: typeNameMaterialReturnSheet, name: "001", factory: materialSheet1.factory, supplier: materialSheet1.supplier, workstation: materialSheet1.workstation, site: site1).save(failOnError: true, flush: true)
        materialReturnSheet2 = new MaterialReturnSheet(typeName: typeNameMaterialReturnSheet, name: "002", factory: materialSheet2.factory, supplier: materialSheet2.supplier, workstation: materialSheet2.workstation, site: site1).save(failOnError: true, flush: true)
        materialReturnSheet3 = new MaterialReturnSheet(typeName: typeNameOutSrcMaterialReturnSheet, name: "003", factory: materialSheet2.factory, supplier: materialSheet3.supplier, workstation: materialSheet3.workstation, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopmaterialreturnsheet = new MaterialReturnSheet(typeName: looptypenameMATERIALRETURNSHEET1, name: "${it}", factory: loopmaterialsheet1.factory, supplier: loopmaterialsheet1.supplier, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopmaterialreturnsheet1 = loopmaterialreturnsheet)
            }
        }
    }

    def createMaterialReturnSheetDet = { createLoopData ->

        //ТѕљтЊЂжђђТќЎтќ«
        materialReturnSheetDet25 = new MaterialReturnSheetDet(header: materialReturnSheet2, typeName: materialReturnSheet2.typeName, name: materialReturnSheet2.name, sequence: 5, materialSheetDet: materialSheetDet25, item: materialSheetDet25.item, unit: materialSheetDet25.item.unit, batch: materialSheetDet25.batch, warehouse: materialSheetDet25.warehouse, warehouseLocation: materialSheetDet25.warehouseLocation, qty: 100, manufactureOrder: materialSheetDet25.manufactureOrder, site: site1).save(failOnError: true, flush: true)

        //тЇіТѕљтЊЂУеЌтцќжђђТќЎтќ«
        materialReturnSheetDet31 = new MaterialReturnSheetDet(header: materialReturnSheet3, typeName: materialReturnSheet3.typeName, name: materialReturnSheet3.name, sequence: 1, materialSheetDet: materialSheetDet31, item: materialSheetDet31.item, unit: materialSheetDet31.item.unit, batch: materialSheetDet31.batch, warehouse: materialSheetDet31.warehouse, warehouseLocation: materialSheetDet31.warehouseLocation, qty: 200, manufactureOrder: materialSheetDet31.manufactureOrder, site: site1).save(failOnError: true, flush: true)
        materialReturnSheetDet32 = new MaterialReturnSheetDet(header: materialReturnSheet3, typeName: materialReturnSheet3.typeName, name: materialReturnSheet3.name, sequence: 2, materialSheetDet: materialSheetDet32, item: materialSheetDet32.item, unit: materialSheetDet32.item.unit, batch: materialSheetDet32.batch, warehouse: materialSheetDet32.warehouse, warehouseLocation: materialSheetDet32.warehouseLocation, qty: 200, manufactureOrder: materialSheetDet32.manufactureOrder, site: site1).save(failOnError: true, flush: true)
        materialReturnSheetDet33 = new MaterialReturnSheetDet(header: materialReturnSheet3, typeName: materialReturnSheet3.typeName, name: materialReturnSheet3.name, sequence: 3, materialSheetDet: materialSheetDet33, item: materialSheetDet33.item, unit: materialSheetDet33.item.unit, batch: materialSheetDet33.batch, warehouse: materialSheetDet33.warehouse, warehouseLocation: materialSheetDet33.warehouseLocation, qty: 200, manufactureOrder: materialSheetDet33.manufactureOrder, site: site1).save(failOnError: true, flush: true)

        processInventoryQtyAndTransactionRecord(materialReturnSheetDet25)

        processInventoryQtyAndTransactionRecord(materialReturnSheetDet31)
        processInventoryQtyAndTransactionRecord(materialReturnSheetDet32)
        processInventoryQtyAndTransactionRecord(materialReturnSheetDet33)

        if (createLoopData) {
            (1..100).each {
                def loopmaterialreturnsheetdet = new MaterialReturnSheetDet(header: loopmaterialreturnsheet1, typeName: loopmaterialreturnsheet1.typeName, name: loopmaterialreturnsheet1.name, sequence: it, materialSheetDet: loopmaterialsheetdet1, item: loopmaterialsheetdet1.item, unit: loopmaterialsheetdet1.item.unit, batch: loopmaterialsheetdet1.batch, warehouse: loopmaterialsheetdet1.warehouse, warehouseLocation: loopmaterialsheetdet1.warehouseLocation, qty: 1, manufactureOrder: loopmaterialsheetdet1.manufactureOrder, site: loopsite1).save(failOnError: true, flush: true)
                processInventoryQtyAndTransactionRecord(loopmaterialreturnsheetdet)

                it != 1 ?: (loopmaterialreturnsheetdet1 = loopmaterialreturnsheetdet)
            }
        }

    }

    def createOutSrcPurchaseReturnSheet = { createLoopData ->
        outSrcPurchaseReturnSheet1 = new OutSrcPurchaseReturnSheet(typeName: typeNameOutSrcPurchaseReturnSheet, name: "001", factory: outSrcPurchaseSheet1.factory, supplier: outSrcPurchaseSheet1.supplier, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopoutsrcpurchasereturnsheet = new OutSrcPurchaseReturnSheet(typeName: looptypenameOUTSRCPURCHASERETURNSHEET1, name: "${it}", factory: loopoutsrcpurchasesheet1.factory, supplier: loopoutsrcpurchasesheet1.supplier, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopoutsrcpurchasereturnsheet1 = loopoutsrcpurchasereturnsheet)
            }
        }
    }

    def createOutSrcPurchaseReturnSheetDet = { createLoopData ->

        //тЇіТѕљтЊЂУеЌтцќжђђУ▓етќ«
        outSrcPurchaseReturnSheetDet11 = new OutSrcPurchaseReturnSheetDet(header: outSrcPurchaseReturnSheet1, typeName: outSrcPurchaseReturnSheet1.typeName, name: outSrcPurchaseReturnSheet1.name, sequence: 1, outSrcPurchaseSheetDet: outSrcPurchaseSheetDet11, item: outSrcPurchaseSheetDet11.item, unit: outSrcPurchaseSheetDet11.item.unit, batch: outSrcPurchaseSheetDet11.batch, warehouse: outSrcPurchaseSheetDet11.warehouse, warehouseLocation: outSrcPurchaseSheetDet11.warehouseLocation, qty: 1000, manufactureOrder: outSrcPurchaseSheetDet11.manufactureOrder, site: site1).save(failOnError: true, flush: true)

        processInventoryQtyAndTransactionRecord(outSrcPurchaseReturnSheetDet11)

        if (createLoopData) {
            (1..100).each {
                def loopoutsrcpurchasereturnsheetdet = new OutSrcPurchaseReturnSheetDet(header: loopoutsrcpurchasereturnsheet1, typeName: loopoutsrcpurchasereturnsheet1.typeName, name: loopoutsrcpurchasereturnsheet1.name, sequence: it, outSrcPurchaseSheetDet: loopoutsrcpurchasesheetdet1, item: loopoutsrcpurchasesheetdet1.item, unit: loopoutsrcpurchasesheetdet1.item.unit, batch: loopoutsrcpurchasesheetdet1.batch, warehouse: loopoutsrcpurchasesheetdet1.warehouse, warehouseLocation: loopoutsrcpurchasesheetdet1.warehouseLocation, qty: 1, manufactureOrder: loopoutsrcpurchasesheetdet1.manufactureOrder, site: loopsite1).save(failOnError: true, flush: true)
                processInventoryQtyAndTransactionRecord(loopoutsrcpurchasereturnsheetdet)

                it != 1 ?: (loopoutsrcpurchasereturnsheetdet1 = loopoutsrcpurchasereturnsheetdet)
            }
        }

    }

    def createSaleReturnSheet = { createLoopData ->

        //ТѕљтЊЂжіижђђ
        saleReturnSheet1 = new SaleReturnSheet(typeName: typeNameSaleReturnSheet, name: "001", factory: saleSheet1.factory, customer: saleSheet1.customer, site: site1).save(failOnError: true, flush: true)
        //УеЌтцќтЇіТѕљтЊЂжіижђђ
        saleReturnSheet2 = new SaleReturnSheet(typeName: typeNameSaleReturnSheet, name: "002", factory: saleSheet2.factory, customer: saleSheet2.customer, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopsalereturnsheet = new SaleReturnSheet(typeName: looptypenameSALERETURNSHEET1, name: "${it}", factory: loopsalesheet1.factory, customer: loopsalesheet1.customer, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopsalereturnsheet1 = loopsalereturnsheet)
            }
        }
    }

    def createSaleReturnSheetDet = { createLoopData ->
        //ТѕљтЊЂжіижђђ
        saleReturnSheetDet11 = new SaleReturnSheetDet(header: saleReturnSheet1, typeName: saleReturnSheet1.typeName, name: saleReturnSheet1.name, sequence: 1, saleSheetDet: saleSheetDet11, item: saleSheetDet11.item, unit: saleSheetDet11.item.unit, batch: saleSheetDet11.batch, warehouse: saleSheetDet11.warehouse, warehouseLocation: saleSheetDet11.warehouseLocation, qty: 1000, customerOrderDet: saleSheetDet11.customerOrderDet, site: site1).save(failOnError: true, flush: true)

        processInventoryQtyAndTransactionRecord(saleReturnSheetDet11)

        if (createLoopData) {
            (1..100).each {
                def loopsalereturnsheetdet = new SaleReturnSheetDet(header: loopsalereturnsheet1, typeName: loopsalereturnsheet1.typeName, name: loopsalereturnsheet1.name, sequence: it, saleSheetDet: loopsalesheetdet1, item: loopsalesheetdet1.item, unit: loopsalesheetdet1.item.unit, batch: loopsalesheetdet1.batch, warehouse: loopsalesheetdet1.warehouse, warehouseLocation: loopsalesheetdet1.warehouseLocation, qty: 10, customerOrderDet: loopsalesheetdet1.customerOrderDet, site: loopsite1).save(failOnError: true, flush: true)
                processInventoryQtyAndTransactionRecord(loopsalereturnsheetdet)

                it != 1 ?: (loopsalereturnsheetdet1 = loopsalereturnsheetdet)
            }
        }

    }

    def createParam = { createLoopData ->

        paramInspect1 = new Param(name: "paramInspect1", title: "уЏітцџТЮЙ", unit: "ppm", defaultValue: "0", paramType: ParamType.INTEGER, site: site1).save(failOnError: true, flush: true)
        paramInspect2 = new Param(name: "paramInspect2", title: "УігТ«║УЪј", unit: "ppm", defaultValue: false, paramType: ParamType.BOOLEAN, site: site1).save(failOnError: true, flush: true)
        paramInspect3 = new Param(name: "paramInspect3", title: "УігТЎ«УЪј", unit: "ppm", defaultValue: "a little", paramType: ParamType.STRING, site: site1).save(failOnError: true, flush: true)
        paramInspect4 = new Param(name: "paramInspect4", title: "Image", paramType: ParamType.IMAGE, site: site1).save(failOnError: true, flush: true)
        paramInspect5 = new Param(name: "paramInspect5", title: "File", paramType: ParamType.FILE, site: site1).save(failOnError: true, flush: true)
        paramOther1 = new Param(name: "paramOther1", title: "AirLevel", defaultValue: "100", paramType: ParamType.INTEGER, site: site1).save(failOnError: true, flush: true)
        paramNutrition1 = new Param(name: "paramNutrition1", title: "Pack", unit: "Т»ФтЇЄ/g", paramType: ParamType.INTEGER, site: site1).save(failOnError: true, flush: true)
        paramNutrition2 = new Param(name: "paramNutrition2", title: "Image", unit: "", paramType: ParamType.IMAGE, site: site1).save(failOnError: true, flush: true)
        paramNutrition3 = new Param(name: "paramNutrition3", title: "File", unit: "", paramType: ParamType.FILE, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopparam = new Param(name: "loopparam_${it}", title: "тЈЃТЋИ_${it}", unit: "тќ«СйЇ_${it}", paramType: ParamType.INTEGER, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopparam1 = loopparam)
            }
        }
    }

    def createReport = { createLoopData ->
        reportInspect1 = new Report(name: "reportInspect1", title: "ТѕљтЊЂТфбжЕЌта▒тЉіжЏє", reportType: ReportType.INSPECT, item: product1ProductBrand1, site: site1).save(failOnError: true, flush: true)
        reportOther1 = new Report(name: "reportOther1", title: "тЁХС╗ќТћХжЏєУ│ЄТќЎ", item: product1ProductBrand1, site: site1).save(failOnError: true, flush: true)
        reportNutrition1 = new Report(name: "reportNutrition1", title: "уЄЪжціТеЎуц║т▒ЦТГи", reportType: ReportType.NUTRITION, item: product1ProductBrand1, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..100).each {
                def loopreport = new Report(name: "loopreport_${it}", title: "т▒ЦТГи_${it}", reportType: ReportType.INSPECT, item: loopitem1, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopreport1 = loopreport)
            }
        }
    }

    def createReportParam = { createLoopData ->
        reportParamInspect1 = new ReportParam(report: reportInspect1, param: paramInspect1, operation: operationInspect, supplier: supplierInspect, site: site1).save(failOnError: true, flush: true)
        reportParamInspect2 = new ReportParam(report: reportInspect1, param: paramInspect2, operation: operationInspect, supplier: supplierInspect, site: site1).save(failOnError: true, flush: true)
        reportParamInspect3 = new ReportParam(report: reportInspect1, param: paramInspect3, operation: operationInspect, supplier: supplierInspect, site: site1).save(failOnError: true, flush: true)
        reportParamInspect4 = new ReportParam(report: reportInspect1, param: paramInspect4, operation: operationInspect, supplier: supplierInspect, site: site1).save(failOnError: true, flush: true)
        reportParamInspect5 = new ReportParam(report: reportInspect1, param: paramInspect5, operation: operationInspect, supplier: supplierInspect, site: site1).save(failOnError: true, flush: true)

        reportParamOther1 = new ReportParam(report: reportOther1, param: paramOther1, operation: operation2, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        reportParamNutrition1 = new ReportParam(report: reportNutrition1, param: paramNutrition1, operation: operation2, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        reportParamNutrition2 = new ReportParam(report: reportNutrition1, param: paramNutrition2, operation: operation2, workstation: workstation11, site: site1).save(failOnError: true, flush: true)
        reportParamNutrition3 = new ReportParam(report: reportNutrition1, param: paramNutrition3, operation: operation2, workstation: workstation11, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..50).each {
                def loopreportparam = new ReportParam(report: loopreport1, param: Param.findByNameAndSite("loopparam_${it}", loopsite1), operation: loopoperation1, workstation: loopworkstation1, site: loopsite1).save(failOnError: true, flush: true)
                it != 1 ?: (loopreportparam1 = loopreportparam)
            }
            (51..100).each {
                new ReportParam(report: loopreport1, param: Param.findByNameAndSite("loopparam_${it}", loopsite1), operation: loopoperation1, supplier: loopsupplier1, site: loopsite1).save(failOnError: true, flush: true)
            }
        }
    }

    def createBatchReportDet = { createLoopData ->

        brdInspect1 = new BatchReportDet(batch: product1ProductBrand1Batch1, reportParam: reportParamInspect1, value: 10, batchOperation: product1ProductBrand1Batch1Operation5, site: site1).save(failOnError: true, flush: true)
        brdInspect2 = new BatchReportDet(batch: product1ProductBrand1Batch1, reportParam: reportParamInspect2, value: "true", batchOperation: product1ProductBrand1Batch1Operation5, site: site1).save(failOnError: true, flush: true)

        brdOther1 = new BatchReportDet(batch: product1ProductBrand1Batch1, reportParam: reportParamOther1, batchOperation: product1ProductBrand1Batch1Operation2, site: site1).save(failOnError: true, flush: true)
        brdNutrition1 = new BatchReportDet(batch: product1ProductBrand1Batch1, reportParam: reportParamNutrition1, batchOperation: product1ProductBrand1Batch1Operation2, site: site1).save(failOnError: true, flush: true)

        if (createLoopData) {
            (1..50).each {
                def loopparam = ReportParam.findByReportAndParamAndOperationAndWorkstationAndSupplierAndSite(loopreport1, Param.findByNameAndSite("loopparam_${it}", loopsite1), loopoperation1, loopworkstation1, null, loopsite1)
                new BatchReportDet(batch: loopbatch1, reportParam: loopparam, value: it, batchOperation: loopbatchoperation1, site: loopsite1).save(failOnError: true, flush: true)
            }
            (51..100).each {
                def loopparam = ReportParam.findByReportAndParamAndOperationAndWorkstationAndSupplierAndSite(loopreport1, Param.findByNameAndSite("loopparam_${it}", loopsite1), loopoperation1, null, loopsupplier1, loopsite1)
                new BatchReportDet(batch: loopbatch1, reportParam: loopparam, value: it, batchOperation: loopbatchoperation1, site: loopsite1).save(failOnError: true, flush: true)
            }
        }

    }

    def createBatchBox = { createLoopData ->
    }

    def createBatchBoxDet = { createLoopData ->
    }

    def createDeliveryKanban = { createLoopData ->
    }

    def createTransferOrder = { createLoopData ->
    }
    
    def createTransferOrderDet = { createLoopData ->
    }

    def createManufactureOrderDet = { createLoopData ->
        def site1 = Site.findByName("site1")
    }

    def processInventoryQtyAndTransactionRecord = { sheet ->
        def warehouse = sheet instanceof InventoryTransactionSheetDet ? sheet.outWarehouse : sheet.warehouse
        def warehouseLocation = sheet instanceof InventoryTransactionSheetDet ? sheet.outWarehouseLocation : sheet.warehouseLocation
        
        def record = new InventoryTransactionRecord(typeName: sheet.typeName, name: sheet.name, sequence: sheet.sequence,
            executionDate: sheet.header.executionDate, transactionType: sheet.typeName.transactionType, multiplier: sheet.typeName.multiplier,
            batch: sheet.batch, item: sheet.item, qty: sheet.qty, unit: sheet.unit,
            warehouse: warehouse, warehouseLocation: warehouseLocation,
            site: sheet.site).save(failOnError: true, flush: true)

        def inventory = Inventory.findByItemAndWarehouseAndSite(sheet.item, warehouse, sheet.site)
        def inventoryDetail = InventoryDetail.findByItemAndWarehouseAndWarehouseLocationAndBatchAndSite(sheet.item, warehouse, warehouseLocation, sheet.batch, sheet.site)

        inventory.qty += sheet.qty*sheet.typeName.multiplier
        inventoryDetail.qty += sheet.qty*sheet.typeName.multiplier

        inventory.save(failOnError: true, flush: true)
        inventoryDetail.save(failOnError: true, flush: true)
    }

    def processSheetPrice = { sheet ->

        sheet.totalPrice = sheet.price*sheet.qty
        switch(sheet) {
            case PurchaseSheetDet :
                sheet.header.totalPrice+=sheet.totalPrice
                break
            case StockInSheetDet :
            case OutSrcPurchaseSheetDet :
            case MaterialReturnSheetDet :
            case SaleReturnSheetDet :
            case MaterialSheetDet :
            case SaleSheetDet :
            case PurchaseReturnSheetDet :
            case OutSrcPurchaseReturnSheetDet :
                break
            default:
                log.debug "TestService---does not know sheet domain class"
                break
        }

    }

    def createTestMessage = {

        grailsApplication.config.grails.i18nType = "mfg"

        messageSource.addMessage("mfg.default.message.save.success", Locale.getDefault(), "тё▓тГўТѕљтіЪ")
        messageSource.addMessage("mfg.default.message.save.failed", Locale.getDefault(), "тё▓тГўтц▒ТЋЌ")
        messageSource.addMessage("mfg.default.message.delete.success", Locale.getDefault(), "тѕфжЎцТѕљтіЪ")
        messageSource.addMessage("mfg.default.message.update.failed", Locale.getDefault(), "ТЏ┤Тќ░тц▒ТЋЌ")
        messageSource.addMessage("mfg.default.message.not.found", Locale.getDefault(), "ТЪЦуёАУ│ЄТќЎ")

        messageSource.addMessage("mfg.user.label", Locale.getDefault(), "Сй┐ућеУђЁ")
        messageSource.addMessage("mfg.site.label", Locale.getDefault(), "тЁгтЈИ")
        messageSource.addMessage("mfg.brand.label", Locale.getDefault(), "тЊЂуЅї")
        messageSource.addMessage("mfg.item.label", Locale.getDefault(), "тЊЂжаЁ")
        messageSource.addMessage("mfg.customer.label", Locale.getDefault(), "т«бТѕХ")
        messageSource.addMessage("mfg.employee.label", Locale.getDefault(), "УЂитЊА")
        messageSource.addMessage("mfg.workstation.label", Locale.getDefault(), "тиЦСйюуФЎ")
        messageSource.addMessage("mfg.supplier.label", Locale.getDefault(), "СЙЏТЄЅтЋє")
        messageSource.addMessage("mfg.operation.label", Locale.getDefault(), "УБйуеІ")
        messageSource.addMessage("mfg.itemRoute.label", Locale.getDefault(), "тЊЂжаЁжђћуеІ")
        messageSource.addMessage("mfg.batchOperation.label", Locale.getDefault(), "ТЅ╣УЎЪУБйуеІ")
        messageSource.addMessage("mfg.reportParam.label", Locale.getDefault(), "т▒ЦТГитЈЃТЋИ")
        messageSource.addMessage("mfg.batchReportDet.label", Locale.getDefault(), "ТЅ╣УЎЪт▒ЦТГитЈЃТЋИ")

        messageSource.addMessage("mfg.country.TAIWAN.label", Locale.getDefault(), "тЈ░уЂБ")
        messageSource.addMessage("mfg.country.AUSTRALIA.label", Locale.getDefault(), "ТЙ│Т┤▓")
        messageSource.addMessage("mfg.country.BRASIL.label", Locale.getDefault(), "ти┤УЦ┐")
        messageSource.addMessage("mfg.country.CANADA.label", Locale.getDefault(), "тіаТІ┐тцД")
        messageSource.addMessage("mfg.country.CHINA.label", Locale.getDefault(), "СИГтюІ")
        messageSource.addMessage("mfg.country.COLOMBIA.label", Locale.getDefault(), "тЊЦтђФТ»ћС║ъ")
        messageSource.addMessage("mfg.country.DANMARK.label", Locale.getDefault(), "СИ╣ж║Ц")
        messageSource.addMessage("mfg.country.FINLAND.label", Locale.getDefault(), "УігУўГ")
        messageSource.addMessage("mfg.country.FRANCE.label", Locale.getDefault(), "Т│ЋтюІ")
        messageSource.addMessage("mfg.country.GERMANY.label", Locale.getDefault(), "тЙитюІ")
        messageSource.addMessage("mfg.country.HONGKONG.label", Locale.getDefault(), "ждЎТИ»")
        messageSource.addMessage("mfg.country.INDIA.label", Locale.getDefault(), "тЇ░т║д")
        messageSource.addMessage("mfg.country.INDONESIA.label", Locale.getDefault(), "тЇ░т░╝")
        messageSource.addMessage("mfg.country.ISRAEL.label", Locale.getDefault(), "С╗ЦУЅ▓тѕЌ")
        messageSource.addMessage("mfg.country.ITALY.label", Locale.getDefault(), "уЙЕтцДтѕЕ")
        messageSource.addMessage("mfg.country.JAPAN.label", Locale.getDefault(), "ТЌЦТюг")
        messageSource.addMessage("mfg.country.KOREA.label", Locale.getDefault(), "жЪЊтюІ")
        messageSource.addMessage("mfg.country.MACAO.label", Locale.getDefault(), "ТЙ│жќђ")
        messageSource.addMessage("mfg.country.MEXICO.label", Locale.getDefault(), "тбеУЦ┐тЊЦ")
        messageSource.addMessage("mfg.country.NETHERLANDS.label", Locale.getDefault(), "УЇиУўГ")
        messageSource.addMessage("mfg.country.NEWZEALAND.label", Locale.getDefault(), "у┤љУЦ┐УўГ")
        messageSource.addMessage("mfg.country.SINGAPORT.label", Locale.getDefault(), "Тќ░тіатЮА")
        messageSource.addMessage("mfg.country.SPAIN.label", Locale.getDefault(), "УЦ┐уЈГуЅЎ")
        messageSource.addMessage("mfg.country.SWEDEN.label", Locale.getDefault(), "уЉътЁИ")
        messageSource.addMessage("mfg.country.SWITZERLAND.label", Locale.getDefault(), "уЉътБФ")
        messageSource.addMessage("mfg.country.THAILAND.label", Locale.getDefault(), "Т│░тюІ")
        messageSource.addMessage("mfg.country.UNITEDKINGDOM.label", Locale.getDefault(), "УІ▒тюІ")
        messageSource.addMessage("mfg.country.UNITEDSTATES.label", Locale.getDefault(), "уЙјтюІ")
        messageSource.addMessage("mfg.country.VIETNAM.label", Locale.getDefault(), "УХітЇЌ")
        messageSource.addMessage("mfg.country.PHILIPPINES.label", Locale.getDefault(), "УЈ▓тЙІУ│Њ")

        messageSource.addMessage("mfg.paramType.INTEGER.label", Locale.getDefault(), "ТЋ┤ТЋИ")
        messageSource.addMessage("mfg.paramType.DOUBLE.label", Locale.getDefault(), "т»дТЋИ")
        messageSource.addMessage("mfg.paramType.BOOLEAN.label", Locale.getDefault(), "тИЃТъЌтђ╝")
    }
}
